Preprocessing executable 'purescript-webgl-generator' for
purescript-webgl-generator-0.1.0.0...
[3 of 4] Compiling IDL.Printer      ( src/IDL/Printer.hs, dist/build/purescript-webgl-generator/purescript-webgl-generator-tmp/IDL/Printer.o )
Linking dist/build/purescript-webgl-generator/purescript-webgl-generator ...
Running purescript-webgl-generator...
-- This file is automatically generated! Don't edit this file, but
-- instead modify purescript-webgl-generator.

module Graphics.WebGLRaw where

import Control.Monad.Eff
import Control.Monad.Eff.WebGL
import Data.ArrayBuffer.Types
import Data.TypedArray

type GLenum     = Number
type GLboolean  = Boolean
type GLbitfield = Number
type GLbyte     = Number
type GLshort    = Number
type GLint      = Number
type GLsizei    = Number
type GLintptr   = Number
type GLsizeiptr = Number
type GLubyte    = Number
type GLushort   = Number
type GLuint     = Number
type GLfloat    = Number
type GLclampf   = Number
type FloatArray = Float32Array

-- *TypeDecls
foreign import data WebGLContextAttributes :: *
foreign import data WebglContext :: *
foreign import data WebGLProgram :: *
foreign import data WebGLShader :: *
foreign import data WebGLBuffer :: *
foreign import data WebGLFramebuffer :: *
foreign import data WebGLRenderbuffer :: *
foreign import data WebGLTexture :: *
foreign import data ArrayBufferView :: *
foreign import data WebGLActiveInfo :: *
foreign import data WebGLUniformLocation :: *
foreign import data ImageData :: *
foreign import data HTMLImageElement :: *
foreign import data HTMLVideoElement :: *

-- *Constants
_DEPTH_BUFFER_BIT :: Number
_DEPTH_BUFFER_BIT = 256

_STENCIL_BUFFER_BIT :: Number
_STENCIL_BUFFER_BIT = 1024

_COLOR_BUFFER_BIT :: Number
_COLOR_BUFFER_BIT = 16384

_POINTS :: Number
_POINTS = 0

_LINES :: Number
_LINES = 1

_LINE_LOOP :: Number
_LINE_LOOP = 2

_LINE_STRIP :: Number
_LINE_STRIP = 3

_TRIANGLES :: Number
_TRIANGLES = 4

_TRIANGLE_STRIP :: Number
_TRIANGLE_STRIP = 5

_TRIANGLE_FAN :: Number
_TRIANGLE_FAN = 6

_ZERO :: Number
_ZERO = 0

_ONE :: Number
_ONE = 1

_SRC_COLOR :: Number
_SRC_COLOR = 768

_ONE_MINUS_SRC_COLOR :: Number
_ONE_MINUS_SRC_COLOR = 769

_SRC_ALPHA :: Number
_SRC_ALPHA = 770

_ONE_MINUS_SRC_ALPHA :: Number
_ONE_MINUS_SRC_ALPHA = 771

_DST_ALPHA :: Number
_DST_ALPHA = 772

_ONE_MINUS_DST_ALPHA :: Number
_ONE_MINUS_DST_ALPHA = 773

_DST_COLOR :: Number
_DST_COLOR = 774

_ONE_MINUS_DST_COLOR :: Number
_ONE_MINUS_DST_COLOR = 775

_SRC_ALPHA_SATURATE :: Number
_SRC_ALPHA_SATURATE = 776

_FUNC_ADD :: Number
_FUNC_ADD = 32774

_BLEND_EQUATION :: Number
_BLEND_EQUATION = 32777

_BLEND_EQUATION_RGB :: Number
_BLEND_EQUATION_RGB = 32777

_BLEND_EQUATION_ALPHA :: Number
_BLEND_EQUATION_ALPHA = 34877

_FUNC_SUBTRACT :: Number
_FUNC_SUBTRACT = 32778

_FUNC_REVERSE_SUBTRACT :: Number
_FUNC_REVERSE_SUBTRACT = 32779

_BLEND_DST_RGB :: Number
_BLEND_DST_RGB = 32968

_BLEND_SRC_RGB :: Number
_BLEND_SRC_RGB = 32969

_BLEND_DST_ALPHA :: Number
_BLEND_DST_ALPHA = 32970

_BLEND_SRC_ALPHA :: Number
_BLEND_SRC_ALPHA = 32971

_CONSTANT_COLOR :: Number
_CONSTANT_COLOR = 32769

_ONE_MINUS_CONSTANT_COLOR :: Number
_ONE_MINUS_CONSTANT_COLOR = 32770

_CONSTANT_ALPHA :: Number
_CONSTANT_ALPHA = 32771

_ONE_MINUS_CONSTANT_ALPHA :: Number
_ONE_MINUS_CONSTANT_ALPHA = 32772

_BLEND_COLOR :: Number
_BLEND_COLOR = 32773

_ARRAY_BUFFER :: Number
_ARRAY_BUFFER = 34962

_ELEMENT_ARRAY_BUFFER :: Number
_ELEMENT_ARRAY_BUFFER = 34963

_ARRAY_BUFFER_BINDING :: Number
_ARRAY_BUFFER_BINDING = 34964

_ELEMENT_ARRAY_BUFFER_BINDING :: Number
_ELEMENT_ARRAY_BUFFER_BINDING = 34965

_STREAM_DRAW :: Number
_STREAM_DRAW = 35040

_STATIC_DRAW :: Number
_STATIC_DRAW = 35044

_DYNAMIC_DRAW :: Number
_DYNAMIC_DRAW = 35048

_BUFFER_SIZE :: Number
_BUFFER_SIZE = 34660

_BUFFER_USAGE :: Number
_BUFFER_USAGE = 34661

_CURRENT_VERTEX_ATTRIB :: Number
_CURRENT_VERTEX_ATTRIB = 34342

_FRONT :: Number
_FRONT = 1028

_BACK :: Number
_BACK = 1029

_FRONT_AND_BACK :: Number
_FRONT_AND_BACK = 1032

_TEXTURE_2D :: Number
_TEXTURE_2D = 3553

_CULL_FACE :: Number
_CULL_FACE = 2884

_BLEND :: Number
_BLEND = 3042

_DITHER :: Number
_DITHER = 3024

_STENCIL_TEST :: Number
_STENCIL_TEST = 2960

_DEPTH_TEST :: Number
_DEPTH_TEST = 2929

_SCISSOR_TEST :: Number
_SCISSOR_TEST = 3089

_POLYGON_OFFSET_FILL :: Number
_POLYGON_OFFSET_FILL = 32823

_SAMPLE_ALPHA_TO_COVERAGE :: Number
_SAMPLE_ALPHA_TO_COVERAGE = 32926

_SAMPLE_COVERAGE :: Number
_SAMPLE_COVERAGE = 32928

_NO_ERROR :: Number
_NO_ERROR = 0

_INVALID_ENUM :: Number
_INVALID_ENUM = 1280

_INVALID_VALUE :: Number
_INVALID_VALUE = 1281

_INVALID_OPERATION :: Number
_INVALID_OPERATION = 1282

_OUT_OF_MEMORY :: Number
_OUT_OF_MEMORY = 1285

_CW :: Number
_CW = 2304

_CCW :: Number
_CCW = 2305

_LINE_WIDTH :: Number
_LINE_WIDTH = 2849

_ALIASED_POINT_SIZE_RANGE :: Number
_ALIASED_POINT_SIZE_RANGE = 33901

_ALIASED_LINE_WIDTH_RANGE :: Number
_ALIASED_LINE_WIDTH_RANGE = 33902

_CULL_FACE_MODE :: Number
_CULL_FACE_MODE = 2885

_FRONT_FACE :: Number
_FRONT_FACE = 2886

_DEPTH_RANGE :: Number
_DEPTH_RANGE = 2928

_DEPTH_WRITEMASK :: Number
_DEPTH_WRITEMASK = 2930

_DEPTH_CLEAR_VALUE :: Number
_DEPTH_CLEAR_VALUE = 2931

_DEPTH_FUNC :: Number
_DEPTH_FUNC = 2932

_STENCIL_CLEAR_VALUE :: Number
_STENCIL_CLEAR_VALUE = 2961

_STENCIL_FUNC :: Number
_STENCIL_FUNC = 2962

_STENCIL_FAIL :: Number
_STENCIL_FAIL = 2964

_STENCIL_PASS_DEPTH_FAIL :: Number
_STENCIL_PASS_DEPTH_FAIL = 2965

_STENCIL_PASS_DEPTH_PASS :: Number
_STENCIL_PASS_DEPTH_PASS = 2966

_STENCIL_REF :: Number
_STENCIL_REF = 2967

_STENCIL_VALUE_MASK :: Number
_STENCIL_VALUE_MASK = 2963

_STENCIL_WRITEMASK :: Number
_STENCIL_WRITEMASK = 2968

_STENCIL_BACK_FUNC :: Number
_STENCIL_BACK_FUNC = 34816

_STENCIL_BACK_FAIL :: Number
_STENCIL_BACK_FAIL = 34817

_STENCIL_BACK_PASS_DEPTH_FAIL :: Number
_STENCIL_BACK_PASS_DEPTH_FAIL = 34818

_STENCIL_BACK_PASS_DEPTH_PASS :: Number
_STENCIL_BACK_PASS_DEPTH_PASS = 34819

_STENCIL_BACK_REF :: Number
_STENCIL_BACK_REF = 36003

_STENCIL_BACK_VALUE_MASK :: Number
_STENCIL_BACK_VALUE_MASK = 36004

_STENCIL_BACK_WRITEMASK :: Number
_STENCIL_BACK_WRITEMASK = 36005

_VIEWPORT :: Number
_VIEWPORT = 2978

_SCISSOR_BOX :: Number
_SCISSOR_BOX = 3088

_COLOR_CLEAR_VALUE :: Number
_COLOR_CLEAR_VALUE = 3106

_COLOR_WRITEMASK :: Number
_COLOR_WRITEMASK = 3107

_UNPACK_ALIGNMENT :: Number
_UNPACK_ALIGNMENT = 3317

_PACK_ALIGNMENT :: Number
_PACK_ALIGNMENT = 3333

_MAX_TEXTURE_SIZE :: Number
_MAX_TEXTURE_SIZE = 3379

_MAX_VIEWPORT_DIMS :: Number
_MAX_VIEWPORT_DIMS = 3386

_SUBPIXEL_BITS :: Number
_SUBPIXEL_BITS = 3408

_RED_BITS :: Number
_RED_BITS = 3410

_GREEN_BITS :: Number
_GREEN_BITS = 3411

_BLUE_BITS :: Number
_BLUE_BITS = 3412

_ALPHA_BITS :: Number
_ALPHA_BITS = 3413

_DEPTH_BITS :: Number
_DEPTH_BITS = 3414

_STENCIL_BITS :: Number
_STENCIL_BITS = 3415

_POLYGON_OFFSET_UNITS :: Number
_POLYGON_OFFSET_UNITS = 10752

_POLYGON_OFFSET_FACTOR :: Number
_POLYGON_OFFSET_FACTOR = 32824

_TEXTURE_BINDING_2D :: Number
_TEXTURE_BINDING_2D = 32873

_SAMPLE_BUFFERS :: Number
_SAMPLE_BUFFERS = 32936

_SAMPLES :: Number
_SAMPLES = 32937

_SAMPLE_COVERAGE_VALUE :: Number
_SAMPLE_COVERAGE_VALUE = 32938

_SAMPLE_COVERAGE_INVERT :: Number
_SAMPLE_COVERAGE_INVERT = 32939

_NUM_COMPRESSED_TEXTURE_FORMATS :: Number
_NUM_COMPRESSED_TEXTURE_FORMATS = 34466

_COMPRESSED_TEXTURE_FORMATS :: Number
_COMPRESSED_TEXTURE_FORMATS = 34467

_DONT_CARE :: Number
_DONT_CARE = 4352

_FASTEST :: Number
_FASTEST = 4353

_NICEST :: Number
_NICEST = 4354

_GENERATE_MIPMAP_HINT :: Number
_GENERATE_MIPMAP_HINT = 33170

_BYTE :: Number
_BYTE = 5120

_UNSIGNED_BYTE :: Number
_UNSIGNED_BYTE = 5121

_SHORT :: Number
_SHORT = 5122

_UNSIGNED_SHORT :: Number
_UNSIGNED_SHORT = 5123

_INT :: Number
_INT = 5124

_UNSIGNED_INT :: Number
_UNSIGNED_INT = 5125

_FLOAT :: Number
_FLOAT = 5126

_DEPTH_COMPONENT :: Number
_DEPTH_COMPONENT = 6402

_ALPHA :: Number
_ALPHA = 6406

_RGB :: Number
_RGB = 6407

_RGBA :: Number
_RGBA = 6408

_LUMINANCE :: Number
_LUMINANCE = 6409

_LUMINANCE_ALPHA :: Number
_LUMINANCE_ALPHA = 6410

_UNSIGNED_SHORT_4_4_4_4 :: Number
_UNSIGNED_SHORT_4_4_4_4 = 32819

_UNSIGNED_SHORT_5_5_5_1 :: Number
_UNSIGNED_SHORT_5_5_5_1 = 32820

_UNSIGNED_SHORT_5_6_5 :: Number
_UNSIGNED_SHORT_5_6_5 = 33635

_FRAGMENT_SHADER :: Number
_FRAGMENT_SHADER = 35632

_VERTEX_SHADER :: Number
_VERTEX_SHADER = 35633

_MAX_VERTEX_ATTRIBS :: Number
_MAX_VERTEX_ATTRIBS = 34921

_MAX_VERTEX_UNIFORM_VECTORS :: Number
_MAX_VERTEX_UNIFORM_VECTORS = 36347

_MAX_VARYING_VECTORS :: Number
_MAX_VARYING_VECTORS = 36348

_MAX_COMBINED_TEXTURE_IMAGE_UNITS :: Number
_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661

_MAX_VERTEX_TEXTURE_IMAGE_UNITS :: Number
_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660

_MAX_TEXTURE_IMAGE_UNITS :: Number
_MAX_TEXTURE_IMAGE_UNITS = 34930

_MAX_FRAGMENT_UNIFORM_VECTORS :: Number
_MAX_FRAGMENT_UNIFORM_VECTORS = 36349

_SHADER_TYPE :: Number
_SHADER_TYPE = 35663

_DELETE_STATUS :: Number
_DELETE_STATUS = 35712

_LINK_STATUS :: Number
_LINK_STATUS = 35714

_VALIDATE_STATUS :: Number
_VALIDATE_STATUS = 35715

_ATTACHED_SHADERS :: Number
_ATTACHED_SHADERS = 35717

_ACTIVE_UNIFORMS :: Number
_ACTIVE_UNIFORMS = 35718

_ACTIVE_UNIFORM_MAX_LENGTH :: Number
_ACTIVE_UNIFORM_MAX_LENGTH = 35719

_ACTIVE_ATTRIBUTES :: Number
_ACTIVE_ATTRIBUTES = 35721

_ACTIVE_ATTRIBUTE_MAX_LENGTH :: Number
_ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722

_SHADING_LANGUAGE_VERSION :: Number
_SHADING_LANGUAGE_VERSION = 35724

_CURRENT_PROGRAM :: Number
_CURRENT_PROGRAM = 35725

_NEVER :: Number
_NEVER = 512

_LESS :: Number
_LESS = 513

_EQUAL :: Number
_EQUAL = 514

_LEQUAL :: Number
_LEQUAL = 515

_GREATER :: Number
_GREATER = 516

_NOTEQUAL :: Number
_NOTEQUAL = 517

_GEQUAL :: Number
_GEQUAL = 518

_ALWAYS :: Number
_ALWAYS = 519

_KEEP :: Number
_KEEP = 7680

_REPLACE :: Number
_REPLACE = 7681

_INCR :: Number
_INCR = 7682

_DECR :: Number
_DECR = 7683

_INVERT :: Number
_INVERT = 5386

_INCR_WRAP :: Number
_INCR_WRAP = 34055

_DECR_WRAP :: Number
_DECR_WRAP = 34056

_VENDOR :: Number
_VENDOR = 7936

_RENDERER :: Number
_RENDERER = 7937

_VERSION :: Number
_VERSION = 7938

_NEAREST :: Number
_NEAREST = 9728

_LINEAR :: Number
_LINEAR = 9729

_NEAREST_MIPMAP_NEAREST :: Number
_NEAREST_MIPMAP_NEAREST = 9984

_LINEAR_MIPMAP_NEAREST :: Number
_LINEAR_MIPMAP_NEAREST = 9985

_NEAREST_MIPMAP_LINEAR :: Number
_NEAREST_MIPMAP_LINEAR = 9986

_LINEAR_MIPMAP_LINEAR :: Number
_LINEAR_MIPMAP_LINEAR = 9987

_TEXTURE_MAG_FILTER :: Number
_TEXTURE_MAG_FILTER = 10240

_TEXTURE_MIN_FILTER :: Number
_TEXTURE_MIN_FILTER = 10241

_TEXTURE_WRAP_S :: Number
_TEXTURE_WRAP_S = 10242

_TEXTURE_WRAP_T :: Number
_TEXTURE_WRAP_T = 10243

_TEXTURE :: Number
_TEXTURE = 5890

_TEXTURE_CUBE_MAP :: Number
_TEXTURE_CUBE_MAP = 34067

_TEXTURE_BINDING_CUBE_MAP :: Number
_TEXTURE_BINDING_CUBE_MAP = 34068

_TEXTURE_CUBE_MAP_POSITIVE_X :: Number
_TEXTURE_CUBE_MAP_POSITIVE_X = 34069

_TEXTURE_CUBE_MAP_NEGATIVE_X :: Number
_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070

_TEXTURE_CUBE_MAP_POSITIVE_Y :: Number
_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071

_TEXTURE_CUBE_MAP_NEGATIVE_Y :: Number
_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072

_TEXTURE_CUBE_MAP_POSITIVE_Z :: Number
_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073

_TEXTURE_CUBE_MAP_NEGATIVE_Z :: Number
_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074

_MAX_CUBE_MAP_TEXTURE_SIZE :: Number
_MAX_CUBE_MAP_TEXTURE_SIZE = 34076

_TEXTURE0 :: Number
_TEXTURE0 = 33984

_TEXTURE1 :: Number
_TEXTURE1 = 33985

_TEXTURE2 :: Number
_TEXTURE2 = 33986

_TEXTURE3 :: Number
_TEXTURE3 = 33987

_TEXTURE4 :: Number
_TEXTURE4 = 33988

_TEXTURE5 :: Number
_TEXTURE5 = 33989

_TEXTURE6 :: Number
_TEXTURE6 = 33990

_TEXTURE7 :: Number
_TEXTURE7 = 33991

_TEXTURE8 :: Number
_TEXTURE8 = 33992

_TEXTURE9 :: Number
_TEXTURE9 = 33993

_TEXTURE10 :: Number
_TEXTURE10 = 33994

_TEXTURE11 :: Number
_TEXTURE11 = 33995

_TEXTURE12 :: Number
_TEXTURE12 = 33996

_TEXTURE13 :: Number
_TEXTURE13 = 33997

_TEXTURE14 :: Number
_TEXTURE14 = 33998

_TEXTURE15 :: Number
_TEXTURE15 = 33999

_TEXTURE16 :: Number
_TEXTURE16 = 34000

_TEXTURE17 :: Number
_TEXTURE17 = 34001

_TEXTURE18 :: Number
_TEXTURE18 = 34002

_TEXTURE19 :: Number
_TEXTURE19 = 34003

_TEXTURE20 :: Number
_TEXTURE20 = 34004

_TEXTURE21 :: Number
_TEXTURE21 = 34005

_TEXTURE22 :: Number
_TEXTURE22 = 34006

_TEXTURE23 :: Number
_TEXTURE23 = 34007

_TEXTURE24 :: Number
_TEXTURE24 = 34008

_TEXTURE25 :: Number
_TEXTURE25 = 34009

_TEXTURE26 :: Number
_TEXTURE26 = 34010

_TEXTURE27 :: Number
_TEXTURE27 = 34011

_TEXTURE28 :: Number
_TEXTURE28 = 34012

_TEXTURE29 :: Number
_TEXTURE29 = 34013

_TEXTURE30 :: Number
_TEXTURE30 = 34014

_TEXTURE31 :: Number
_TEXTURE31 = 34015

_ACTIVE_TEXTURE :: Number
_ACTIVE_TEXTURE = 34016

_REPEAT :: Number
_REPEAT = 10497

_CLAMP_TO_EDGE :: Number
_CLAMP_TO_EDGE = 33071

_MIRRORED_REPEAT :: Number
_MIRRORED_REPEAT = 33648

_FLOAT_VEC2 :: Number
_FLOAT_VEC2 = 35664

_FLOAT_VEC3 :: Number
_FLOAT_VEC3 = 35665

_FLOAT_VEC4 :: Number
_FLOAT_VEC4 = 35666

_INT_VEC2 :: Number
_INT_VEC2 = 35667

_INT_VEC3 :: Number
_INT_VEC3 = 35668

_INT_VEC4 :: Number
_INT_VEC4 = 35669

_BOOL :: Number
_BOOL = 35670

_BOOL_VEC2 :: Number
_BOOL_VEC2 = 35671

_BOOL_VEC3 :: Number
_BOOL_VEC3 = 35672

_BOOL_VEC4 :: Number
_BOOL_VEC4 = 35673

_FLOAT_MAT2 :: Number
_FLOAT_MAT2 = 35674

_FLOAT_MAT3 :: Number
_FLOAT_MAT3 = 35675

_FLOAT_MAT4 :: Number
_FLOAT_MAT4 = 35676

_SAMPLER_2D :: Number
_SAMPLER_2D = 35678

_SAMPLER_CUBE :: Number
_SAMPLER_CUBE = 35680

_VERTEX_ATTRIB_ARRAY_ENABLED :: Number
_VERTEX_ATTRIB_ARRAY_ENABLED = 34338

_VERTEX_ATTRIB_ARRAY_SIZE :: Number
_VERTEX_ATTRIB_ARRAY_SIZE = 34339

_VERTEX_ATTRIB_ARRAY_STRIDE :: Number
_VERTEX_ATTRIB_ARRAY_STRIDE = 34340

_VERTEX_ATTRIB_ARRAY_TYPE :: Number
_VERTEX_ATTRIB_ARRAY_TYPE = 34341

_VERTEX_ATTRIB_ARRAY_NORMALIZED :: Number
_VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922

_VERTEX_ATTRIB_ARRAY_POINTER :: Number
_VERTEX_ATTRIB_ARRAY_POINTER = 34373

_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING :: Number
_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975

_COMPILE_STATUS :: Number
_COMPILE_STATUS = 35713

_INFO_LOG_LENGTH :: Number
_INFO_LOG_LENGTH = 35716

_SHADER_SOURCE_LENGTH :: Number
_SHADER_SOURCE_LENGTH = 35720

_LOW_FLOAT :: Number
_LOW_FLOAT = 36336

_MEDIUM_FLOAT :: Number
_MEDIUM_FLOAT = 36337

_HIGH_FLOAT :: Number
_HIGH_FLOAT = 36338

_LOW_INT :: Number
_LOW_INT = 36339

_MEDIUM_INT :: Number
_MEDIUM_INT = 36340

_HIGH_INT :: Number
_HIGH_INT = 36341

_FRAMEBUFFER :: Number
_FRAMEBUFFER = 36160

_RENDERBUFFER :: Number
_RENDERBUFFER = 36161

_RGBA4 :: Number
_RGBA4 = 32854

_RGB5_A1 :: Number
_RGB5_A1 = 32855

_RGB565 :: Number
_RGB565 = 36194

_DEPTH_COMPONENT16 :: Number
_DEPTH_COMPONENT16 = 33189

_STENCIL_INDEX :: Number
_STENCIL_INDEX = 6401

_STENCIL_INDEX8 :: Number
_STENCIL_INDEX8 = 36168

_DEPTH_STENCIL :: Number
_DEPTH_STENCIL = 34041

_RENDERBUFFER_WIDTH :: Number
_RENDERBUFFER_WIDTH = 36162

_RENDERBUFFER_HEIGHT :: Number
_RENDERBUFFER_HEIGHT = 36163

_RENDERBUFFER_INTERNAL_FORMAT :: Number
_RENDERBUFFER_INTERNAL_FORMAT = 36164

_RENDERBUFFER_RED_SIZE :: Number
_RENDERBUFFER_RED_SIZE = 36176

_RENDERBUFFER_GREEN_SIZE :: Number
_RENDERBUFFER_GREEN_SIZE = 36177

_RENDERBUFFER_BLUE_SIZE :: Number
_RENDERBUFFER_BLUE_SIZE = 36178

_RENDERBUFFER_ALPHA_SIZE :: Number
_RENDERBUFFER_ALPHA_SIZE = 36179

_RENDERBUFFER_DEPTH_SIZE :: Number
_RENDERBUFFER_DEPTH_SIZE = 36180

_RENDERBUFFER_STENCIL_SIZE :: Number
_RENDERBUFFER_STENCIL_SIZE = 36181

_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :: Number
_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048

_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :: Number
_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049

_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :: Number
_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050

_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :: Number
_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051

_COLOR_ATTACHMENT0 :: Number
_COLOR_ATTACHMENT0 = 36064

_DEPTH_ATTACHMENT :: Number
_DEPTH_ATTACHMENT = 36096

_STENCIL_ATTACHMENT :: Number
_STENCIL_ATTACHMENT = 36128

_DEPTH_STENCIL_ATTACHMENT :: Number
_DEPTH_STENCIL_ATTACHMENT = 33306

_NONE :: Number
_NONE = 0

_FRAMEBUFFER_COMPLETE :: Number
_FRAMEBUFFER_COMPLETE = 36053

_FRAMEBUFFER_INCOMPLETE_ATTACHMENT :: Number
_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054

_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :: Number
_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055

_FRAMEBUFFER_INCOMPLETE_DIMENSIONS :: Number
_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057

_FRAMEBUFFER_UNSUPPORTED :: Number
_FRAMEBUFFER_UNSUPPORTED = 36061

_FRAMEBUFFER_BINDING :: Number
_FRAMEBUFFER_BINDING = 36006

_RENDERBUFFER_BINDING :: Number
_RENDERBUFFER_BINDING = 36007

_MAX_RENDERBUFFER_SIZE :: Number
_MAX_RENDERBUFFER_SIZE = 34024

_INVALID_FRAMEBUFFER_OPERATION :: Number
_INVALID_FRAMEBUFFER_OPERATION = 1286

_UNPACK_FLIP_Y_WEBGL :: Number
_UNPACK_FLIP_Y_WEBGL = 37440

_UNPACK_PREMULTIPLY_ALPHA_WEBGL :: Number
_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441

_CONTEXT_LOST_WEBGL :: Number
_CONTEXT_LOST_WEBGL = 37442

_UNPACK_COLORSPACE_CONVERSION_WEBGL :: Number
_UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443

_BROWSER_DEFAULT_WEBGL :: Number
_BROWSER_DEFAULT_WEBGL = 37444


-- *Methods
foreign import getContextAttributesImpl """
  function getContextAttributesImpl(webgl) {
    return function () {
      return webgl.getContextAttributes();
    };
  }
""" :: forall eff. (Eff (webgl :: WebGl | eff) WebGLContextAttributes)

foreign import isContextLostImpl """
  function isContextLostImpl(webgl) {
    return function () {
      return webgl.isContextLost();
    };
  }
""" :: forall eff. (Eff (webgl :: WebGl | eff) Boolean)

foreign import getSupportedExtensionsImpl """
  function getSupportedExtensionsImpl(webgl) {
    return function () {
      return webgl.getSupportedExtensions();
    };
  }
""" :: forall eff. (Eff (webgl :: WebGl | eff) String)

foreign import getExtensionImpl """
  function getExtensionImpl(webgl, name) {
    return function () {
      return webgl.getExtension(name);
    };
  }
""" :: forall eff ret. String -> (Eff (webgl :: WebGl | eff) ret)

foreign import activeTextureImpl """
  function activeTextureImpl(webgl, texture) {
    return function () {
      return webgl.activeTexture(texture);
    };
  }
""" :: forall eff. GLenum -> (Eff (webgl :: WebGl | eff) Unit)

foreign import attachShaderImpl """
  function attachShaderImpl(webgl, program, shader) {
    return function () {
      return webgl.attachShader(program, shader);
    };
  }
""" :: forall eff. WebGLProgram->
                   WebGLShader
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import bindAttribLocationImpl """
  function bindAttribLocationImpl(webgl, program, index, name) {
    return function () {
      return webgl.bindAttribLocation(program, index, name);
    };
  }
""" :: forall eff. WebGLProgram->
                   GLuint->
                   String
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import bindBufferImpl """
  function bindBufferImpl(webgl, target, buffer) {
    return function () {
      return webgl.bindBuffer(target, buffer);
    };
  }
""" :: forall eff. GLenum->
                   WebGLBuffer
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import bindFramebufferImpl """
  function bindFramebufferImpl(webgl, target, framebuffer) {
    return function () {
      return webgl.bindFramebuffer(target, framebuffer);
    };
  }
""" :: forall eff. GLenum->
                   WebGLFramebuffer
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import bindRenderbufferImpl """
  function bindRenderbufferImpl(webgl, target, renderbuffer) {
    return function () {
      return webgl.bindRenderbuffer(target, renderbuffer);
    };
  }
""" :: forall eff. GLenum->
                   WebGLRenderbuffer
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import bindTextureImpl """
  function bindTextureImpl(webgl, target, texture) {
    return function () {
      return webgl.bindTexture(target, texture);
    };
  }
""" :: forall eff. GLenum->
                   WebGLTexture
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import blendColorImpl """
  function blendColorImpl(webgl, red, green, blue, alpha) {
    return function () {
      return webgl.blendColor(red, green, blue, alpha);
    };
  }
""" :: forall eff. GLclampf->
                   GLclampf->
                   GLclampf->
                   GLclampf
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import blendEquationImpl """
  function blendEquationImpl(webgl, mode) {
    return function () {
      return webgl.blendEquation(mode);
    };
  }
""" :: forall eff. GLenum -> (Eff (webgl :: WebGl | eff) Unit)

foreign import blendEquationSeparateImpl """
  function blendEquationSeparateImpl(webgl, modeRGB, modeAlpha) {
    return function () {
      return webgl.blendEquationSeparate(modeRGB, modeAlpha);
    };
  }
""" :: forall eff. GLenum->
                   GLenum
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import blendFuncImpl """
  function blendFuncImpl(webgl, sfactor, dfactor) {
    return function () {
      return webgl.blendFunc(sfactor, dfactor);
    };
  }
""" :: forall eff. GLenum->
                   GLenum
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import blendFuncSeparateImpl """
  function blendFuncSeparateImpl(webgl, srcRGB, dstRGB, srcAlpha, dstAlpha) {
    return function () {
      return webgl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
    };
  }
""" :: forall eff. GLenum->
                   GLenum->
                   GLenum->
                   GLenum
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import bufferDataImpl """
  function bufferDataImpl(webgl, target, data, usage) {
    return function () {
      return webgl.bufferData(target, data, usage);
    };
  }
""" :: forall eff. GLenum->
                   Float32Array->
                   GLenum
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import bufferSubDataImpl """
  function bufferSubDataImpl(webgl, target, offset, data) {
    return function () {
      return webgl.bufferSubData(target, offset, data);
    };
  }
""" :: forall eff. GLenum->
                   GLintptr->
                   ArrayBufferView
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import checkFramebufferStatusImpl """
  function checkFramebufferStatusImpl(webgl, target) {
    return function () {
      return webgl.checkFramebufferStatus(target);
    };
  }
""" :: forall eff. GLenum -> (Eff (webgl :: WebGl | eff) GLenum)

foreign import clearImpl """
  function clearImpl(webgl, mask) {
    return function () {
      return webgl.clear(mask);
    };
  }
""" :: forall eff. GLbitfield -> (Eff (webgl :: WebGl | eff) Unit)

foreign import clearColorImpl """
  function clearColorImpl(webgl, red, green, blue, alpha) {
    return function () {
      return webgl.clearColor(red, green, blue, alpha);
    };
  }
""" :: forall eff. GLclampf->
                   GLclampf->
                   GLclampf->
                   GLclampf
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import clearDepthImpl """
  function clearDepthImpl(webgl, depth) {
    return function () {
      return webgl.clearDepth(depth);
    };
  }
""" :: forall eff. GLclampf -> (Eff (webgl :: WebGl | eff) Unit)

foreign import clearStencilImpl """
  function clearStencilImpl(webgl, s) {
    return function () {
      return webgl.clearStencil(s);
    };
  }
""" :: forall eff. GLint -> (Eff (webgl :: WebGl | eff) Unit)

foreign import colorMaskImpl """
  function colorMaskImpl(webgl, red, green, blue, alpha) {
    return function () {
      return webgl.colorMask(red, green, blue, alpha);
    };
  }
""" :: forall eff. GLboolean->
                   GLboolean->
                   GLboolean->
                   GLboolean
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import compileShaderImpl """
  function compileShaderImpl(webgl, shader) {
    return function () {
      return webgl.compileShader(shader);
    };
  }
""" :: forall eff. WebGLShader -> (Eff (webgl :: WebGl | eff) Unit)

foreign import copyTexImage2DImpl """
  function copyTexImage2DImpl(webgl, target, level, internalformat, x, y, width, height, border) {
    return function () {
      return webgl.copyTexImage2D(target, level, internalformat, x, y, width, height, border);
    };
  }
""" :: forall eff. GLenum->
                   GLint->
                   GLenum->
                   GLint->
                   GLint->
                   GLsizei->
                   GLsizei->
                   GLint
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import copyTexSubImage2DImpl """
  function copyTexSubImage2DImpl(webgl, target, level, xoffset, yoffset, x, y, width, height) {
    return function () {
      return webgl.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    };
  }
""" :: forall eff. GLenum->
                   GLint->
                   GLint->
                   GLint->
                   GLint->
                   GLint->
                   GLsizei->
                   GLsizei
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import createBufferImpl """
  function createBufferImpl(webgl) {
    return function () {
      return webgl.createBuffer();
    };
  }
""" :: forall eff. (Eff (webgl :: WebGl | eff) WebGLBuffer)

foreign import createFramebufferImpl """
  function createFramebufferImpl(webgl) {
    return function () {
      return webgl.createFramebuffer();
    };
  }
""" :: forall eff. (Eff (webgl :: WebGl | eff) WebGLFramebuffer)

foreign import createProgramImpl """
  function createProgramImpl(webgl) {
    return function () {
      return webgl.createProgram();
    };
  }
""" :: forall eff. (Eff (webgl :: WebGl | eff) WebGLProgram)

foreign import createRenderbufferImpl """
  function createRenderbufferImpl(webgl) {
    return function () {
      return webgl.createRenderbuffer();
    };
  }
""" :: forall eff. (Eff (webgl :: WebGl | eff) WebGLRenderbuffer)

foreign import createShaderImpl """
  function createShaderImpl(webgl, type) {
    return function () {
      return webgl.createShader(type);
    };
  }
""" :: forall eff. GLenum
                   -> (Eff (webgl :: WebGl | eff) WebGLShader)

foreign import createTextureImpl """
  function createTextureImpl(webgl) {
    return function () {
      return webgl.createTexture();
    };
  }
""" :: forall eff. (Eff (webgl :: WebGl | eff) WebGLTexture)

foreign import cullFaceImpl """
  function cullFaceImpl(webgl, mode) {
    return function () {
      return webgl.cullFace(mode);
    };
  }
""" :: forall eff. GLenum -> (Eff (webgl :: WebGl | eff) Unit)

foreign import deleteBufferImpl """
  function deleteBufferImpl(webgl, buffer) {
    return function () {
      return webgl.deleteBuffer(buffer);
    };
  }
""" :: forall eff. WebGLBuffer -> (Eff (webgl :: WebGl | eff) Unit)

foreign import deleteFramebufferImpl """
  function deleteFramebufferImpl(webgl, framebuffer) {
    return function () {
      return webgl.deleteFramebuffer(framebuffer);
    };
  }
""" :: forall eff. WebGLFramebuffer
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import deleteProgramImpl """
  function deleteProgramImpl(webgl, program) {
    return function () {
      return webgl.deleteProgram(program);
    };
  }
""" :: forall eff. WebGLProgram
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import deleteRenderbufferImpl """
  function deleteRenderbufferImpl(webgl, renderbuffer) {
    return function () {
      return webgl.deleteRenderbuffer(renderbuffer);
    };
  }
""" :: forall eff. WebGLRenderbuffer
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import deleteShaderImpl """
  function deleteShaderImpl(webgl, shader) {
    return function () {
      return webgl.deleteShader(shader);
    };
  }
""" :: forall eff. WebGLShader -> (Eff (webgl :: WebGl | eff) Unit)

foreign import deleteTextureImpl """
  function deleteTextureImpl(webgl, texture) {
    return function () {
      return webgl.deleteTexture(texture);
    };
  }
""" :: forall eff. WebGLTexture
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import depthFuncImpl """
  function depthFuncImpl(webgl, func) {
    return function () {
      return webgl.depthFunc(func);
    };
  }
""" :: forall eff. GLenum -> (Eff (webgl :: WebGl | eff) Unit)

foreign import depthMaskImpl """
  function depthMaskImpl(webgl, flag) {
    return function () {
      return webgl.depthMask(flag);
    };
  }
""" :: forall eff. GLboolean -> (Eff (webgl :: WebGl | eff) Unit)

foreign import depthRangeImpl """
  function depthRangeImpl(webgl, zNear, zFar) {
    return function () {
      return webgl.depthRange(zNear, zFar);
    };
  }
""" :: forall eff. GLclampf->
                   GLclampf
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import detachShaderImpl """
  function detachShaderImpl(webgl, program, shader) {
    return function () {
      return webgl.detachShader(program, shader);
    };
  }
""" :: forall eff. WebGLProgram->
                   WebGLShader
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import disableImpl """
  function disableImpl(webgl, cap) {
    return function () {
      return webgl.disable(cap);
    };
  }
""" :: forall eff. GLenum -> (Eff (webgl :: WebGl | eff) Unit)

foreign import disableVertexAttribArrayImpl """
  function disableVertexAttribArrayImpl(webgl, index) {
    return function () {
      return webgl.disableVertexAttribArray(index);
    };
  }
""" :: forall eff. GLuint -> (Eff (webgl :: WebGl | eff) Unit)

foreign import drawArraysImpl """
  function drawArraysImpl(webgl, mode, first, count) {
    return function () {
      return webgl.drawArrays(mode, first, count);
    };
  }
""" :: forall eff. GLenum->
                   GLint->
                   GLsizei
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import drawElementsImpl """
  function drawElementsImpl(webgl, mode, count, type, offset) {
    return function () {
      return webgl.drawElements(mode, count, type, offset);
    };
  }
""" :: forall eff. GLenum->
                   GLsizei->
                   GLenum->
                   GLintptr
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import enableImpl """
  function enableImpl(webgl, cap) {
    return function () {
      return webgl.enable(cap);
    };
  }
""" :: forall eff. GLenum -> (Eff (webgl :: WebGl | eff) Unit)

foreign import enableVertexAttribArrayImpl """
  function enableVertexAttribArrayImpl(webgl, index) {
    return function () {
      return webgl.enableVertexAttribArray(index);
    };
  }
""" :: forall eff. GLuint -> (Eff (webgl :: WebGl | eff) Unit)

foreign import finishImpl """
  function finishImpl(webgl) {
    return function () {
      return webgl.finish();
    };
  }
""" :: forall eff. (Eff (webgl :: WebGl | eff) Unit)

foreign import flushImpl """
  function flushImpl(webgl) {
    return function () {
      return webgl.flush();
    };
  }
""" :: forall eff. (Eff (webgl :: WebGl | eff) Unit)

foreign import framebufferRenderbufferImpl """
  function framebufferRenderbufferImpl(webgl, target, attachment, renderbuffertarget, renderbuffer) {
    return function () {
      return webgl.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    };
  }
""" :: forall eff. GLenum->
                   GLenum->
                   GLenum->
                   WebGLRenderbuffer
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import framebufferTexture2DImpl """
  function framebufferTexture2DImpl(webgl, target, attachment, textarget, texture, level) {
    return function () {
      return webgl.framebufferTexture2D(target, attachment, textarget, texture, level);
    };
  }
""" :: forall eff. GLenum->
                   GLenum->
                   GLenum->
                   WebGLTexture->
                   GLint
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import frontFaceImpl """
  function frontFaceImpl(webgl, mode) {
    return function () {
      return webgl.frontFace(mode);
    };
  }
""" :: forall eff. GLenum -> (Eff (webgl :: WebGl | eff) Unit)

foreign import generateMipmapImpl """
  function generateMipmapImpl(webgl, target) {
    return function () {
      return webgl.generateMipmap(target);
    };
  }
""" :: forall eff. GLenum -> (Eff (webgl :: WebGl | eff) Unit)

foreign import getActiveAttribImpl """
  function getActiveAttribImpl(webgl, program, index) {
    return function () {
      return webgl.getActiveAttrib(program, index);
    };
  }
""" :: forall eff. WebGLProgram->
                   GLuint
                   -> (Eff (webgl :: WebGl | eff) WebGLActiveInfo)

foreign import getActiveUniformImpl """
  function getActiveUniformImpl(webgl, program, index) {
    return function () {
      return webgl.getActiveUniform(program, index);
    };
  }
""" :: forall eff. WebGLProgram->
                   GLuint
                   -> (Eff (webgl :: WebGl | eff) WebGLActiveInfo)

foreign import getAttachedShadersImpl """
  function getAttachedShadersImpl(webgl, program) {
    return function () {
      return webgl.getAttachedShaders(program);
    };
  }
""" :: forall eff. WebGLProgram
                   -> (Eff (webgl :: WebGl | eff) WebGLShader)

foreign import getAttribLocationImpl """
  function getAttribLocationImpl(webgl, program, name) {
    return function () {
      return webgl.getAttribLocation(program, name);
    };
  }
""" :: forall eff. WebGLProgram->
                   String
                   -> (Eff (webgl :: WebGl | eff) GLint)

foreign import getParameterImpl """
  function getParameterImpl(webgl, pname) {
    return function () {
      return webgl.getParameter(pname);
    };
  }
""" :: forall eff ret. GLenum -> (Eff (webgl :: WebGl | eff) ret)

foreign import getBufferParameterImpl """
  function getBufferParameterImpl(webgl, target, pname) {
    return function () {
      return webgl.getBufferParameter(target, pname);
    };
  }
""" :: forall eff ret. GLenum->
                       GLenum
                       -> (Eff (webgl :: WebGl | eff) ret)

foreign import getErrorImpl """
  function getErrorImpl(webgl) {
    return function () {
      return webgl.getError();
    };
  }
""" :: forall eff. (Eff (webgl :: WebGl | eff) GLenum)

foreign import getFramebufferAttachmentParameterImpl """
  function getFramebufferAttachmentParameterImpl(webgl, target, attachment, pname) {
    return function () {
      return webgl.getFramebufferAttachmentParameter(target, attachment, pname);
    };
  }
""" :: forall eff ret. GLenum->
                       GLenum->
                       GLenum
                       -> (Eff (webgl :: WebGl | eff) ret)

foreign import getProgramParameterImpl """
  function getProgramParameterImpl(webgl, program, pname) {
    return function () {
      return webgl.getProgramParameter(program, pname);
    };
  }
""" :: forall eff ret. WebGLProgram->
                       GLenum
                       -> (Eff (webgl :: WebGl | eff) ret)

foreign import getProgramInfoLogImpl """
  function getProgramInfoLogImpl(webgl, program) {
    return function () {
      return webgl.getProgramInfoLog(program);
    };
  }
""" :: forall eff. WebGLProgram
                   -> (Eff (webgl :: WebGl | eff) String)

foreign import getRenderbufferParameterImpl """
  function getRenderbufferParameterImpl(webgl, target, pname) {
    return function () {
      return webgl.getRenderbufferParameter(target, pname);
    };
  }
""" :: forall eff ret. GLenum->
                       GLenum
                       -> (Eff (webgl :: WebGl | eff) ret)

foreign import getShaderParameterImpl """
  function getShaderParameterImpl(webgl, shader, pname) {
    return function () {
      return webgl.getShaderParameter(shader, pname);
    };
  }
""" :: forall eff ret. WebGLShader->
                       GLenum
                       -> (Eff (webgl :: WebGl | eff) ret)

foreign import getShaderInfoLogImpl """
  function getShaderInfoLogImpl(webgl, shader) {
    return function () {
      return webgl.getShaderInfoLog(shader);
    };
  }
""" :: forall eff. WebGLShader
                   -> (Eff (webgl :: WebGl | eff) String)

foreign import getShaderSourceImpl """
  function getShaderSourceImpl(webgl, shader) {
    return function () {
      return webgl.getShaderSource(shader);
    };
  }
""" :: forall eff. WebGLShader
                   -> (Eff (webgl :: WebGl | eff) String)

foreign import getTexParameterImpl """
  function getTexParameterImpl(webgl, target, pname) {
    return function () {
      return webgl.getTexParameter(target, pname);
    };
  }
""" :: forall eff ret. GLenum->
                       GLenum
                       -> (Eff (webgl :: WebGl | eff) ret)

foreign import getUniformImpl """
  function getUniformImpl(webgl, program, location) {
    return function () {
      return webgl.getUniform(program, location);
    };
  }
""" :: forall eff ret. WebGLProgram->
                       WebGLUniformLocation
                       -> (Eff (webgl :: WebGl | eff) ret)

foreign import getUniformLocationImpl """
  function getUniformLocationImpl(webgl, program, name) {
    return function () {
      return webgl.getUniformLocation(program, name);
    };
  }
""" :: forall eff. WebGLProgram->
                   String
                   -> (Eff (webgl :: WebGl | eff) WebGLUniformLocation)

foreign import getVertexAttribImpl """
  function getVertexAttribImpl(webgl, index, pname) {
    return function () {
      return webgl.getVertexAttrib(index, pname);
    };
  }
""" :: forall eff ret. GLuint->
                       GLenum
                       -> (Eff (webgl :: WebGl | eff) ret)

foreign import getVertexAttribOffsetImpl """
  function getVertexAttribOffsetImpl(webgl, index, pname) {
    return function () {
      return webgl.getVertexAttribOffset(index, pname);
    };
  }
""" :: forall eff. GLuint->
                   GLenum
                   -> (Eff (webgl :: WebGl | eff) GLsizeiptr)

foreign import hintImpl """
  function hintImpl(webgl, target, mode) {
    return function () {
      return webgl.hint(target, mode);
    };
  }
""" :: forall eff. GLenum->
                   GLenum
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import isBufferImpl """
  function isBufferImpl(webgl, buffer) {
    return function () {
      return webgl.isBuffer(buffer);
    };
  }
""" :: forall eff. WebGLBuffer
                   -> (Eff (webgl :: WebGl | eff) GLboolean)

foreign import isEnabledImpl """
  function isEnabledImpl(webgl, cap) {
    return function () {
      return webgl.isEnabled(cap);
    };
  }
""" :: forall eff. GLenum -> (Eff (webgl :: WebGl | eff) GLboolean)

foreign import isFramebufferImpl """
  function isFramebufferImpl(webgl, framebuffer) {
    return function () {
      return webgl.isFramebuffer(framebuffer);
    };
  }
""" :: forall eff. WebGLFramebuffer
                   -> (Eff (webgl :: WebGl | eff) GLboolean)

foreign import isProgramImpl """
  function isProgramImpl(webgl, program) {
    return function () {
      return webgl.isProgram(program);
    };
  }
""" :: forall eff. WebGLProgram
                   -> (Eff (webgl :: WebGl | eff) GLboolean)

foreign import isRenderbufferImpl """
  function isRenderbufferImpl(webgl, renderbuffer) {
    return function () {
      return webgl.isRenderbuffer(renderbuffer);
    };
  }
""" :: forall eff. WebGLRenderbuffer
                   -> (Eff (webgl :: WebGl | eff) GLboolean)

foreign import isShaderImpl """
  function isShaderImpl(webgl, shader) {
    return function () {
      return webgl.isShader(shader);
    };
  }
""" :: forall eff. WebGLShader
                   -> (Eff (webgl :: WebGl | eff) GLboolean)

foreign import isTextureImpl """
  function isTextureImpl(webgl, texture) {
    return function () {
      return webgl.isTexture(texture);
    };
  }
""" :: forall eff. WebGLTexture
                   -> (Eff (webgl :: WebGl | eff) GLboolean)

foreign import lineWidthImpl """
  function lineWidthImpl(webgl, width) {
    return function () {
      return webgl.lineWidth(width);
    };
  }
""" :: forall eff. GLfloat -> (Eff (webgl :: WebGl | eff) Unit)

foreign import linkProgramImpl """
  function linkProgramImpl(webgl, program) {
    return function () {
      return webgl.linkProgram(program);
    };
  }
""" :: forall eff. WebGLProgram
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import pixelStoreiImpl """
  function pixelStoreiImpl(webgl, pname, param) {
    return function () {
      return webgl.pixelStorei(pname, param);
    };
  }
""" :: forall eff. GLenum->
                   GLint
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import polygonOffsetImpl """
  function polygonOffsetImpl(webgl, factor, units) {
    return function () {
      return webgl.polygonOffset(factor, units);
    };
  }
""" :: forall eff. GLfloat->
                   GLfloat
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import readPixelsImpl """
  function readPixelsImpl(webgl, x, y, width, height, format, type, pixels) {
    return function () {
      return webgl.readPixels(x, y, width, height, format, type, pixels);
    };
  }
""" :: forall eff. GLint->
                   GLint->
                   GLsizei->
                   GLsizei->
                   GLenum->
                   GLenum->
                   ArrayBufferView
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import renderbufferStorageImpl """
  function renderbufferStorageImpl(webgl, target, internalformat, width, height) {
    return function () {
      return webgl.renderbufferStorage(target, internalformat, width, height);
    };
  }
""" :: forall eff. GLenum->
                   GLenum->
                   GLsizei->
                   GLsizei
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import sampleCoverageImpl """
  function sampleCoverageImpl(webgl, value, invert) {
    return function () {
      return webgl.sampleCoverage(value, invert);
    };
  }
""" :: forall eff. GLclampf->
                   GLboolean
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import scissorImpl """
  function scissorImpl(webgl, x, y, width, height) {
    return function () {
      return webgl.scissor(x, y, width, height);
    };
  }
""" :: forall eff. GLint->
                   GLint->
                   GLsizei->
                   GLsizei
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import shaderSourceImpl """
  function shaderSourceImpl(webgl, shader, source) {
    return function () {
      return webgl.shaderSource(shader, source);
    };
  }
""" :: forall eff. WebGLShader->
                   String
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import stencilFuncImpl """
  function stencilFuncImpl(webgl, func, ref, mask) {
    return function () {
      return webgl.stencilFunc(func, ref, mask);
    };
  }
""" :: forall eff. GLenum->
                   GLint->
                   GLuint
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import stencilFuncSeparateImpl """
  function stencilFuncSeparateImpl(webgl, face, func, ref, mask) {
    return function () {
      return webgl.stencilFuncSeparate(face, func, ref, mask);
    };
  }
""" :: forall eff. GLenum->
                   GLenum->
                   GLint->
                   GLuint
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import stencilMaskImpl """
  function stencilMaskImpl(webgl, mask) {
    return function () {
      return webgl.stencilMask(mask);
    };
  }
""" :: forall eff. GLuint -> (Eff (webgl :: WebGl | eff) Unit)

foreign import stencilMaskSeparateImpl """
  function stencilMaskSeparateImpl(webgl, face, mask) {
    return function () {
      return webgl.stencilMaskSeparate(face, mask);
    };
  }
""" :: forall eff. GLenum->
                   GLuint
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import stencilOpImpl """
  function stencilOpImpl(webgl, fail, zfail, zpass) {
    return function () {
      return webgl.stencilOp(fail, zfail, zpass);
    };
  }
""" :: forall eff. GLenum->
                   GLenum->
                   GLenum
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import stencilOpSeparateImpl """
  function stencilOpSeparateImpl(webgl, face, fail, zfail, zpass) {
    return function () {
      return webgl.stencilOpSeparate(face, fail, zfail, zpass);
    };
  }
""" :: forall eff. GLenum->
                   GLenum->
                   GLenum->
                   GLenum
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import texImage2DImpl """
  function texImage2DImpl(webgl, target, level, internalformat, width, height, border, format, type, pixels) {
    return function () {
      return webgl.texImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    };
  }
""" :: forall eff. GLenum->
                   GLint->
                   GLenum->
                   GLsizei->
                   GLsizei->
                   GLint->
                   GLenum->
                   GLenum->
                   ArrayBufferView
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import texParameterfImpl """
  function texParameterfImpl(webgl, target, pname, param) {
    return function () {
      return webgl.texParameterf(target, pname, param);
    };
  }
""" :: forall eff. GLenum->
                   GLenum->
                   GLfloat
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import texParameteriImpl """
  function texParameteriImpl(webgl, target, pname, param) {
    return function () {
      return webgl.texParameteri(target, pname, param);
    };
  }
""" :: forall eff. GLenum->
                   GLenum->
                   GLint
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import texSubImage2DImpl """
  function texSubImage2DImpl(webgl, target, level, xoffset, yoffset, width, height, format, type, pixels) {
    return function () {
      return webgl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    };
  }
""" :: forall eff. GLenum->
                   GLint->
                   GLint->
                   GLint->
                   GLsizei->
                   GLsizei->
                   GLenum->
                   GLenum->
                   ArrayBufferView
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniform1fImpl """
  function uniform1fImpl(webgl, location, x) {
    return function () {
      return webgl.uniform1f(location, x);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   GLfloat
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniform1fvImpl """
  function uniform1fvImpl(webgl, location, v) {
    return function () {
      return webgl.uniform1fv(location, v);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   FloatArray
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniform1iImpl """
  function uniform1iImpl(webgl, location, x) {
    return function () {
      return webgl.uniform1i(location, x);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   GLint
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniform1ivImpl """
  function uniform1ivImpl(webgl, location, v) {
    return function () {
      return webgl.uniform1iv(location, v);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   Int32Array
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniform2fImpl """
  function uniform2fImpl(webgl, location, x, y) {
    return function () {
      return webgl.uniform2f(location, x, y);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   GLfloat->
                   GLfloat
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniform2fvImpl """
  function uniform2fvImpl(webgl, location, v) {
    return function () {
      return webgl.uniform2fv(location, v);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   FloatArray
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniform2iImpl """
  function uniform2iImpl(webgl, location, x, y) {
    return function () {
      return webgl.uniform2i(location, x, y);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   GLint->
                   GLint
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniform2ivImpl """
  function uniform2ivImpl(webgl, location, v) {
    return function () {
      return webgl.uniform2iv(location, v);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   Int32Array
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniform3fImpl """
  function uniform3fImpl(webgl, location, x, y, z) {
    return function () {
      return webgl.uniform3f(location, x, y, z);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   GLfloat->
                   GLfloat->
                   GLfloat
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniform3fvImpl """
  function uniform3fvImpl(webgl, location, v) {
    return function () {
      return webgl.uniform3fv(location, v);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   FloatArray
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniform3iImpl """
  function uniform3iImpl(webgl, location, x, y, z) {
    return function () {
      return webgl.uniform3i(location, x, y, z);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   GLint->
                   GLint->
                   GLint
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniform3ivImpl """
  function uniform3ivImpl(webgl, location, v) {
    return function () {
      return webgl.uniform3iv(location, v);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   Int32Array
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniform4fImpl """
  function uniform4fImpl(webgl, location, x, y, z, w) {
    return function () {
      return webgl.uniform4f(location, x, y, z, w);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   GLfloat->
                   GLfloat->
                   GLfloat->
                   GLfloat
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniform4fvImpl """
  function uniform4fvImpl(webgl, location, v) {
    return function () {
      return webgl.uniform4fv(location, v);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   FloatArray
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniform4iImpl """
  function uniform4iImpl(webgl, location, x, y, z, w) {
    return function () {
      return webgl.uniform4i(location, x, y, z, w);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   GLint->
                   GLint->
                   GLint->
                   GLint
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniform4ivImpl """
  function uniform4ivImpl(webgl, location, v) {
    return function () {
      return webgl.uniform4iv(location, v);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   Int32Array
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniformMatrix2fvImpl """
  function uniformMatrix2fvImpl(webgl, location, transpose, value) {
    return function () {
      return webgl.uniformMatrix2fv(location, transpose, value);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   GLboolean->
                   FloatArray
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniformMatrix3fvImpl """
  function uniformMatrix3fvImpl(webgl, location, transpose, value) {
    return function () {
      return webgl.uniformMatrix3fv(location, transpose, value);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   GLboolean->
                   FloatArray
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import uniformMatrix4fvImpl """
  function uniformMatrix4fvImpl(webgl, location, transpose, value) {
    return function () {
      return webgl.uniformMatrix4fv(location, transpose, value);
    };
  }
""" :: forall eff. WebGLUniformLocation->
                   GLboolean->
                   FloatArray
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import useProgramImpl """
  function useProgramImpl(webgl, program) {
    return function () {
      return webgl.useProgram(program);
    };
  }
""" :: forall eff. WebGLProgram
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import validateProgramImpl """
  function validateProgramImpl(webgl, program) {
    return function () {
      return webgl.validateProgram(program);
    };
  }
""" :: forall eff. WebGLProgram
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import vertexAttrib1fImpl """
  function vertexAttrib1fImpl(webgl, indx, x) {
    return function () {
      return webgl.vertexAttrib1f(indx, x);
    };
  }
""" :: forall eff. GLuint->
                   GLfloat
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import vertexAttrib1fvImpl """
  function vertexAttrib1fvImpl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib1fv(indx, values);
    };
  }
""" :: forall eff. GLuint->
                   FloatArray
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import vertexAttrib2fImpl """
  function vertexAttrib2fImpl(webgl, indx, x, y) {
    return function () {
      return webgl.vertexAttrib2f(indx, x, y);
    };
  }
""" :: forall eff. GLuint->
                   GLfloat->
                   GLfloat
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import vertexAttrib2fvImpl """
  function vertexAttrib2fvImpl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib2fv(indx, values);
    };
  }
""" :: forall eff. GLuint->
                   FloatArray
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import vertexAttrib3fImpl """
  function vertexAttrib3fImpl(webgl, indx, x, y, z) {
    return function () {
      return webgl.vertexAttrib3f(indx, x, y, z);
    };
  }
""" :: forall eff. GLuint->
                   GLfloat->
                   GLfloat->
                   GLfloat
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import vertexAttrib3fvImpl """
  function vertexAttrib3fvImpl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib3fv(indx, values);
    };
  }
""" :: forall eff. GLuint->
                   FloatArray
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import vertexAttrib4fImpl """
  function vertexAttrib4fImpl(webgl, indx, x, y, z, w) {
    return function () {
      return webgl.vertexAttrib4f(indx, x, y, z, w);
    };
  }
""" :: forall eff. GLuint->
                   GLfloat->
                   GLfloat->
                   GLfloat->
                   GLfloat
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import vertexAttrib4fvImpl """
  function vertexAttrib4fvImpl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib4fv(indx, values);
    };
  }
""" :: forall eff. GLuint->
                   FloatArray
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import vertexAttribPointerImpl """
  function vertexAttribPointerImpl(webgl, indx, size, type, normalized, stride, offset) {
    return function () {
      return webgl.vertexAttribPointer(indx, size, type, normalized, stride, offset);
    };
  }
""" :: forall eff. GLuint->
                   GLint->
                   GLenum->
                   GLboolean->
                   GLsizei->
                   GLintptr
                   -> (Eff (webgl :: WebGl | eff) Unit)

foreign import viewportImpl """
  function viewportImpl(webgl, x, y, width, height) {
    return function () {
      return webgl.viewport(x, y, width, height);
    };
  }
""" :: forall eff. GLint->
                   GLint->
                   GLsizei->
                   GLsizei
                   -> (Eff (webgl :: WebGl | eff) Unit)
