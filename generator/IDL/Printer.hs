{-# LANGUAGE OverloadedStrings #-}

module IDL.Printer
( typesFFI
, enumsFFI
, funcsFFI
) where

import Data.List (sort)
import Data.Maybe (isNothing)
import Text.PrettyPrint (Doc, ($+$), ($$), (<>), (<+>), brackets, char, empty,
  hcat, integer, lbrace, nest, parens, punctuate, rbrace, semi, space, text,
  vcat)

import IDL.AST

typesFFI :: IDL -> Doc
typesFFI idl =
    generatedWarning $+$ blank $+$
    header           $+$ blank $+$
    typeDefs         $+$ blank $+$
    typeDecls        $+$ blank
  where
    typeDecls = vcat . map ppTypeDecl . sort $ types idl
    header = vcat
      [ "module Graphics.WebGL.Raw.Types where"
      , ""
      , "import Data.ArrayBuffer.Types (Float32Array ())"
      ]

enumsFFI :: IDL -> Doc
enumsFFI idl =
    generatedWarning $+$ blank $+$
    header           $+$ blank $+$
    constants        $+$ blank
  where
    constants = vcat . map ppConstant $ enums idl
    header = vcat
      [ "module Graphics.WebGL.Raw.Enums where"
      , ""
      , "import Graphics.WebGL.Raw.Types (GLenum ())"
      ]

funcsFFI :: IDL -> Doc
funcsFFI idl =
    generatedWarning $+$ blank $+$
    moduleDef        $+$ blank $+$
    imports          $+$ blank $+$
    methods          $+$ blank
  where
    methods = vcat . map ppFuncImpl $ functions idl
    moduleDef = vcat
      [ "module Graphics.WebGL.Raw"
      , ppExportList (functions idl) $+$ ") where"
      ]
    imports = vcat
      [ "import Control.Monad.Eff"
      , "import Data.ArrayBuffer.Types"
      , "import Data.TypedArray"
      , "import Data.Function"
      , "import Graphics.WebGL.Raw.Enums"
      , "import Graphics.WebGL.Raw.Types"
      , ""
      , "foreign import data WebGL :: !"
      ]

-- predefined text

generatedWarning :: Doc
generatedWarning = vcat
    [ "-- This file is automatically generated! Don't edit this file, but"
    , "-- instead modify purescript-webgl-generator."
    ]

typeDefs :: Doc
typeDefs = vcat
    [ "type DOMString   = String"
    , "type FloatArray  = Float32Array"
    , "type GLbitfield  = Number"
    , "type GLboolean   = Boolean"
    , "type GLbyte      = Number"
    , "type GLclampf    = Number"
    , "type GLenum      = Number"
    , "type GLfloat     = Number"
    , "type GLint       = Number"
    , "type GLintptr    = Number"
    , "type GLshort     = Number"
    , "type GLsizei     = Number"
    , "type GLsizeiptr  = Number"
    , "type GLubyte     = Number"
    , "type GLuint      = Number"
    , "type GLushort    = Number"
    ]

-- component pretty-printers

ppConstant :: Decl -> Doc
ppConstant Enum { enumName = n, enumValue = v } =
    constName <+> ":: GLenum" $$
    constName <+> "=" <+> (integer v) $$
    blank
  where
    constName = text $ '_' : n

ppTypeSig :: Decl -> Doc
ppTypeSig f
    | hasGenericReturnType =
        ":: forall eff a." <+> argList <+> effMonad (char 'a')
    | otherwise =
        ":: forall eff." <+> argList <+> effMonad (ppType $ methodRetType f)
  where
    hasGenericReturnType =
      typeName (methodRetType f) `elem` ["any", "object"]
    effMonad doc =
      parens $ "Eff (webgl :: WebGL | eff)" <+> doc
    argList =
      "Fn" <> text (show . length $ funcArgs f) <+>
      hcat (punctuate space (map (ppType . argType) (funcArgs f)))

ppMethod :: Decl -> Doc
ppMethod f =
    prefixWebgl <> text (methodName f) <> parens (ppArgs methodArgs f) <> semi

ppFuncImplBody :: Decl -> Doc
ppFuncImplBody f =
    func <+> implName f <> parens (ppArgs funcArgs f) <+> lbrace $+$
    nest 2 (ret <+> func <+> parens empty <+> lbrace) $+$
    nest 4 (ret <+> ppMethod f) $+$
    nest 2 rbrace <> semi $+$
    rbrace
  where
    func = "function"
    ret  = "return"

ppArgs :: (Decl -> [Arg]) -> Decl -> Doc
ppArgs f = hcat . punctuate ", " . map (text . argName) . f

ppFuncImpl :: Decl -> Doc
ppFuncImpl f =
    "foreign import" <+> implName f <+>
    jsBlock $+$ nest 2 (ppFuncImplBody f) $+$ jsBlock <+>
    ppTypeSig f $+$ blank
  where
    jsBlock = "\"\"\""

ppTypeDecl :: Type -> Doc
ppTypeDecl d = "foreign import data" <+> text (typeName d) <+> ":: *"

ppType :: Type -> Doc
ppType Type { typeName = name, typeIsArray = isArray }
    | name == "void"        = toType "Unit"
    | name == "boolean"     = toType "Boolean"
    | name == "ArrayBuffer" = toType "Float32Array"
    | otherwise             = toType name
  where
    toType = if isArray then brackets . text else text

ppExportList :: [Decl] -> Doc
ppExportList = vcat . addOpener . prePunct (", ") . map (text . methodName)
  where
    addOpener (x:xs) = "(" <+> x : xs
    addOpener xs     = xs

-- helpers

blank :: Doc
blank = ""

implName :: Decl -> Doc
implName f = text (methodName f) <> "Impl"

prefixWebgl :: Doc
prefixWebgl = text (argName webglContext) <> "."

prePunct :: Doc -> [Doc] -> [Doc]
prePunct p (x:x':xs) = x : go x xs
  where
    go y [] = [p <> y]
    go y (z:zs) = (p <> y) : go z zs
prePunct _ xs = xs
