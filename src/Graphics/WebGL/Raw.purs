-- This file is automatically generated! Don't edit this file, but
-- instead modify purescript-webgl-generator.

-- This file is automatically generated! Don't edit this file, but
-- instead modify purescript-webgl-generator.

module Graphics.WebGL.Raw where

import Control.Monad.Eff
import Data.ArrayBuffer.Types
import Data.TypedArray
import Data.Function
import Graphics.WebGL.Raw.Enums
import Graphics.WebGL.Raw.Types

foreign import data WebGL :: !

foreign import getContextAttributesImpl """
  function getContextAttributesImpl(webgl) {
    return function () {
      return webgl.getContextAttributes();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (webgl :: WebGL | eff) WebGLContextAttributes)

foreign import isContextLostImpl """
  function isContextLostImpl(webgl) {
    return function () {
      return webgl.isContextLost();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (webgl :: WebGL | eff) Boolean)

foreign import getSupportedExtensionsImpl """
  function getSupportedExtensionsImpl(webgl) {
    return function () {
      return webgl.getSupportedExtensions();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (webgl :: WebGL | eff) [DOMString])

foreign import getExtensionImpl """
  function getExtensionImpl(webgl, name) {
    return function () {
      return webgl.getExtension(name);
    };
  }
""" :: forall eff a. Fn2 WebGLContext DOMString (Eff (webgl :: WebGL | eff) a)

foreign import activeTextureImpl """
  function activeTextureImpl(webgl, texture) {
    return function () {
      return webgl.activeTexture(texture);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (webgl :: WebGL | eff) Unit)

foreign import attachShaderImpl """
  function attachShaderImpl(webgl, program, shader) {
    return function () {
      return webgl.attachShader(program, shader);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLProgram WebGLShader (Eff (webgl :: WebGL | eff) Unit)

foreign import bindAttribLocationImpl """
  function bindAttribLocationImpl(webgl, program, index, name) {
    return function () {
      return webgl.bindAttribLocation(program, index, name);
    };
  }
""" :: forall eff. Fn4 WebGLContext WebGLProgram GLuint DOMString (Eff (webgl :: WebGL | eff) Unit)

foreign import bindBufferImpl """
  function bindBufferImpl(webgl, target, buffer) {
    return function () {
      return webgl.bindBuffer(target, buffer);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum WebGLBuffer (Eff (webgl :: WebGL | eff) Unit)

foreign import bindFramebufferImpl """
  function bindFramebufferImpl(webgl, target, framebuffer) {
    return function () {
      return webgl.bindFramebuffer(target, framebuffer);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum WebGLFramebuffer (Eff (webgl :: WebGL | eff) Unit)

foreign import bindRenderbufferImpl """
  function bindRenderbufferImpl(webgl, target, renderbuffer) {
    return function () {
      return webgl.bindRenderbuffer(target, renderbuffer);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum WebGLRenderbuffer (Eff (webgl :: WebGL | eff) Unit)

foreign import bindTextureImpl """
  function bindTextureImpl(webgl, target, texture) {
    return function () {
      return webgl.bindTexture(target, texture);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum WebGLTexture (Eff (webgl :: WebGL | eff) Unit)

foreign import blendColorImpl """
  function blendColorImpl(webgl, red, green, blue, alpha) {
    return function () {
      return webgl.blendColor(red, green, blue, alpha);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLclampf GLclampf GLclampf GLclampf (Eff (webgl :: WebGL | eff) Unit)

foreign import blendEquationImpl """
  function blendEquationImpl(webgl, mode) {
    return function () {
      return webgl.blendEquation(mode);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (webgl :: WebGL | eff) Unit)

foreign import blendEquationSeparateImpl """
  function blendEquationSeparateImpl(webgl, modeRGB, modeAlpha) {
    return function () {
      return webgl.blendEquationSeparate(modeRGB, modeAlpha);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum GLenum (Eff (webgl :: WebGL | eff) Unit)

foreign import blendFuncImpl """
  function blendFuncImpl(webgl, sfactor, dfactor) {
    return function () {
      return webgl.blendFunc(sfactor, dfactor);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum GLenum (Eff (webgl :: WebGL | eff) Unit)

foreign import blendFuncSeparateImpl """
  function blendFuncSeparateImpl(webgl, srcRGB, dstRGB, srcAlpha, dstAlpha) {
    return function () {
      return webgl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLenum GLenum GLenum GLenum (Eff (webgl :: WebGL | eff) Unit)

foreign import bufferDataImpl """
  function bufferDataImpl(webgl, target, data, usage) {
    return function () {
      return webgl.bufferData(target, data, usage);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLenum Float32Array GLenum (Eff (webgl :: WebGL | eff) Unit)

foreign import bufferSubDataImpl """
  function bufferSubDataImpl(webgl, target, offset, data) {
    return function () {
      return webgl.bufferSubData(target, offset, data);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLenum GLintptr ArrayBufferView (Eff (webgl :: WebGL | eff) Unit)

foreign import checkFramebufferStatusImpl """
  function checkFramebufferStatusImpl(webgl, target) {
    return function () {
      return webgl.checkFramebufferStatus(target);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (webgl :: WebGL | eff) GLenum)

foreign import clearImpl """
  function clearImpl(webgl, mask) {
    return function () {
      return webgl.clear(mask);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLbitfield (Eff (webgl :: WebGL | eff) Unit)

foreign import clearColorImpl """
  function clearColorImpl(webgl, red, green, blue, alpha) {
    return function () {
      return webgl.clearColor(red, green, blue, alpha);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLclampf GLclampf GLclampf GLclampf (Eff (webgl :: WebGL | eff) Unit)

foreign import clearDepthImpl """
  function clearDepthImpl(webgl, depth) {
    return function () {
      return webgl.clearDepth(depth);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLclampf (Eff (webgl :: WebGL | eff) Unit)

foreign import clearStencilImpl """
  function clearStencilImpl(webgl, s) {
    return function () {
      return webgl.clearStencil(s);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLint (Eff (webgl :: WebGL | eff) Unit)

foreign import colorMaskImpl """
  function colorMaskImpl(webgl, red, green, blue, alpha) {
    return function () {
      return webgl.colorMask(red, green, blue, alpha);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLboolean GLboolean GLboolean GLboolean (Eff (webgl :: WebGL | eff) Unit)

foreign import compileShaderImpl """
  function compileShaderImpl(webgl, shader) {
    return function () {
      return webgl.compileShader(shader);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLShader (Eff (webgl :: WebGL | eff) Unit)

foreign import copyTexImage2DImpl """
  function copyTexImage2DImpl(webgl, target, level, internalformat, x, y, width, height, border) {
    return function () {
      return webgl.copyTexImage2D(target, level, internalformat, x, y, width, height, border);
    };
  }
""" :: forall eff. Fn9 WebGLContext GLenum GLint GLenum GLint GLint GLsizei GLsizei GLint (Eff (webgl :: WebGL | eff) Unit)

foreign import copyTexSubImage2DImpl """
  function copyTexSubImage2DImpl(webgl, target, level, xoffset, yoffset, x, y, width, height) {
    return function () {
      return webgl.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    };
  }
""" :: forall eff. Fn9 WebGLContext GLenum GLint GLint GLint GLint GLint GLsizei GLsizei (Eff (webgl :: WebGL | eff) Unit)

foreign import createBufferImpl """
  function createBufferImpl(webgl) {
    return function () {
      return webgl.createBuffer();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (webgl :: WebGL | eff) WebGLBuffer)

foreign import createFramebufferImpl """
  function createFramebufferImpl(webgl) {
    return function () {
      return webgl.createFramebuffer();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (webgl :: WebGL | eff) WebGLFramebuffer)

foreign import createProgramImpl """
  function createProgramImpl(webgl) {
    return function () {
      return webgl.createProgram();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (webgl :: WebGL | eff) WebGLProgram)

foreign import createRenderbufferImpl """
  function createRenderbufferImpl(webgl) {
    return function () {
      return webgl.createRenderbuffer();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (webgl :: WebGL | eff) WebGLRenderbuffer)

foreign import createShaderImpl """
  function createShaderImpl(webgl, type) {
    return function () {
      return webgl.createShader(type);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (webgl :: WebGL | eff) WebGLShader)

foreign import createTextureImpl """
  function createTextureImpl(webgl) {
    return function () {
      return webgl.createTexture();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (webgl :: WebGL | eff) WebGLTexture)

foreign import cullFaceImpl """
  function cullFaceImpl(webgl, mode) {
    return function () {
      return webgl.cullFace(mode);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (webgl :: WebGL | eff) Unit)

foreign import deleteBufferImpl """
  function deleteBufferImpl(webgl, buffer) {
    return function () {
      return webgl.deleteBuffer(buffer);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLBuffer (Eff (webgl :: WebGL | eff) Unit)

foreign import deleteFramebufferImpl """
  function deleteFramebufferImpl(webgl, framebuffer) {
    return function () {
      return webgl.deleteFramebuffer(framebuffer);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLFramebuffer (Eff (webgl :: WebGL | eff) Unit)

foreign import deleteProgramImpl """
  function deleteProgramImpl(webgl, program) {
    return function () {
      return webgl.deleteProgram(program);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLProgram (Eff (webgl :: WebGL | eff) Unit)

foreign import deleteRenderbufferImpl """
  function deleteRenderbufferImpl(webgl, renderbuffer) {
    return function () {
      return webgl.deleteRenderbuffer(renderbuffer);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLRenderbuffer (Eff (webgl :: WebGL | eff) Unit)

foreign import deleteShaderImpl """
  function deleteShaderImpl(webgl, shader) {
    return function () {
      return webgl.deleteShader(shader);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLShader (Eff (webgl :: WebGL | eff) Unit)

foreign import deleteTextureImpl """
  function deleteTextureImpl(webgl, texture) {
    return function () {
      return webgl.deleteTexture(texture);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLTexture (Eff (webgl :: WebGL | eff) Unit)

foreign import depthFuncImpl """
  function depthFuncImpl(webgl, func) {
    return function () {
      return webgl.depthFunc(func);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (webgl :: WebGL | eff) Unit)

foreign import depthMaskImpl """
  function depthMaskImpl(webgl, flag) {
    return function () {
      return webgl.depthMask(flag);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLboolean (Eff (webgl :: WebGL | eff) Unit)

foreign import depthRangeImpl """
  function depthRangeImpl(webgl, zNear, zFar) {
    return function () {
      return webgl.depthRange(zNear, zFar);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLclampf GLclampf (Eff (webgl :: WebGL | eff) Unit)

foreign import detachShaderImpl """
  function detachShaderImpl(webgl, program, shader) {
    return function () {
      return webgl.detachShader(program, shader);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLProgram WebGLShader (Eff (webgl :: WebGL | eff) Unit)

foreign import disableImpl """
  function disableImpl(webgl, cap) {
    return function () {
      return webgl.disable(cap);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (webgl :: WebGL | eff) Unit)

foreign import disableVertexAttribArrayImpl """
  function disableVertexAttribArrayImpl(webgl, index) {
    return function () {
      return webgl.disableVertexAttribArray(index);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLuint (Eff (webgl :: WebGL | eff) Unit)

foreign import drawArraysImpl """
  function drawArraysImpl(webgl, mode, first, count) {
    return function () {
      return webgl.drawArrays(mode, first, count);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLenum GLint GLsizei (Eff (webgl :: WebGL | eff) Unit)

foreign import drawElementsImpl """
  function drawElementsImpl(webgl, mode, count, type, offset) {
    return function () {
      return webgl.drawElements(mode, count, type, offset);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLenum GLsizei GLenum GLintptr (Eff (webgl :: WebGL | eff) Unit)

foreign import enableImpl """
  function enableImpl(webgl, cap) {
    return function () {
      return webgl.enable(cap);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (webgl :: WebGL | eff) Unit)

foreign import enableVertexAttribArrayImpl """
  function enableVertexAttribArrayImpl(webgl, index) {
    return function () {
      return webgl.enableVertexAttribArray(index);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLuint (Eff (webgl :: WebGL | eff) Unit)

foreign import finishImpl """
  function finishImpl(webgl) {
    return function () {
      return webgl.finish();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (webgl :: WebGL | eff) Unit)

foreign import flushImpl """
  function flushImpl(webgl) {
    return function () {
      return webgl.flush();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (webgl :: WebGL | eff) Unit)

foreign import framebufferRenderbufferImpl """
  function framebufferRenderbufferImpl(webgl, target, attachment, renderbuffertarget, renderbuffer) {
    return function () {
      return webgl.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLenum GLenum GLenum WebGLRenderbuffer (Eff (webgl :: WebGL | eff) Unit)

foreign import framebufferTexture2DImpl """
  function framebufferTexture2DImpl(webgl, target, attachment, textarget, texture, level) {
    return function () {
      return webgl.framebufferTexture2D(target, attachment, textarget, texture, level);
    };
  }
""" :: forall eff. Fn6 WebGLContext GLenum GLenum GLenum WebGLTexture GLint (Eff (webgl :: WebGL | eff) Unit)

foreign import frontFaceImpl """
  function frontFaceImpl(webgl, mode) {
    return function () {
      return webgl.frontFace(mode);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (webgl :: WebGL | eff) Unit)

foreign import generateMipmapImpl """
  function generateMipmapImpl(webgl, target) {
    return function () {
      return webgl.generateMipmap(target);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (webgl :: WebGL | eff) Unit)

foreign import getActiveAttribImpl """
  function getActiveAttribImpl(webgl, program, index) {
    return function () {
      return webgl.getActiveAttrib(program, index);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLProgram GLuint (Eff (webgl :: WebGL | eff) WebGLActiveInfo)

foreign import getActiveUniformImpl """
  function getActiveUniformImpl(webgl, program, index) {
    return function () {
      return webgl.getActiveUniform(program, index);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLProgram GLuint (Eff (webgl :: WebGL | eff) WebGLActiveInfo)

foreign import getAttachedShadersImpl """
  function getAttachedShadersImpl(webgl, program) {
    return function () {
      return webgl.getAttachedShaders(program);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLProgram (Eff (webgl :: WebGL | eff) [WebGLShader])

foreign import getAttribLocationImpl """
  function getAttribLocationImpl(webgl, program, name) {
    return function () {
      return webgl.getAttribLocation(program, name);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLProgram DOMString (Eff (webgl :: WebGL | eff) GLint)

foreign import getParameterImpl """
  function getParameterImpl(webgl, pname) {
    return function () {
      return webgl.getParameter(pname);
    };
  }
""" :: forall eff a. Fn2 WebGLContext GLenum (Eff (webgl :: WebGL | eff) a)

foreign import getBufferParameterImpl """
  function getBufferParameterImpl(webgl, target, pname) {
    return function () {
      return webgl.getBufferParameter(target, pname);
    };
  }
""" :: forall eff a. Fn3 WebGLContext GLenum GLenum (Eff (webgl :: WebGL | eff) a)

foreign import getErrorImpl """
  function getErrorImpl(webgl) {
    return function () {
      return webgl.getError();
    };
  }
""" :: forall eff. Fn1 WebGLContext (Eff (webgl :: WebGL | eff) GLenum)

foreign import getFramebufferAttachmentParameterImpl """
  function getFramebufferAttachmentParameterImpl(webgl, target, attachment, pname) {
    return function () {
      return webgl.getFramebufferAttachmentParameter(target, attachment, pname);
    };
  }
""" :: forall eff a. Fn4 WebGLContext GLenum GLenum GLenum (Eff (webgl :: WebGL | eff) a)

foreign import getProgramParameterImpl """
  function getProgramParameterImpl(webgl, program, pname) {
    return function () {
      return webgl.getProgramParameter(program, pname);
    };
  }
""" :: forall eff a. Fn3 WebGLContext WebGLProgram GLenum (Eff (webgl :: WebGL | eff) a)

foreign import getProgramInfoLogImpl """
  function getProgramInfoLogImpl(webgl, program) {
    return function () {
      return webgl.getProgramInfoLog(program);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLProgram (Eff (webgl :: WebGL | eff) DOMString)

foreign import getRenderbufferParameterImpl """
  function getRenderbufferParameterImpl(webgl, target, pname) {
    return function () {
      return webgl.getRenderbufferParameter(target, pname);
    };
  }
""" :: forall eff a. Fn3 WebGLContext GLenum GLenum (Eff (webgl :: WebGL | eff) a)

foreign import getShaderParameterImpl """
  function getShaderParameterImpl(webgl, shader, pname) {
    return function () {
      return webgl.getShaderParameter(shader, pname);
    };
  }
""" :: forall eff a. Fn3 WebGLContext WebGLShader GLenum (Eff (webgl :: WebGL | eff) a)

foreign import getShaderInfoLogImpl """
  function getShaderInfoLogImpl(webgl, shader) {
    return function () {
      return webgl.getShaderInfoLog(shader);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLShader (Eff (webgl :: WebGL | eff) DOMString)

foreign import getShaderSourceImpl """
  function getShaderSourceImpl(webgl, shader) {
    return function () {
      return webgl.getShaderSource(shader);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLShader (Eff (webgl :: WebGL | eff) DOMString)

foreign import getTexParameterImpl """
  function getTexParameterImpl(webgl, target, pname) {
    return function () {
      return webgl.getTexParameter(target, pname);
    };
  }
""" :: forall eff a. Fn3 WebGLContext GLenum GLenum (Eff (webgl :: WebGL | eff) a)

foreign import getUniformImpl """
  function getUniformImpl(webgl, program, location) {
    return function () {
      return webgl.getUniform(program, location);
    };
  }
""" :: forall eff a. Fn3 WebGLContext WebGLProgram WebGLUniformLocation (Eff (webgl :: WebGL | eff) a)

foreign import getUniformLocationImpl """
  function getUniformLocationImpl(webgl, program, name) {
    return function () {
      return webgl.getUniformLocation(program, name);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLProgram DOMString (Eff (webgl :: WebGL | eff) WebGLUniformLocation)

foreign import getVertexAttribImpl """
  function getVertexAttribImpl(webgl, index, pname) {
    return function () {
      return webgl.getVertexAttrib(index, pname);
    };
  }
""" :: forall eff a. Fn3 WebGLContext GLuint GLenum (Eff (webgl :: WebGL | eff) a)

foreign import getVertexAttribOffsetImpl """
  function getVertexAttribOffsetImpl(webgl, index, pname) {
    return function () {
      return webgl.getVertexAttribOffset(index, pname);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLuint GLenum (Eff (webgl :: WebGL | eff) GLsizeiptr)

foreign import hintImpl """
  function hintImpl(webgl, target, mode) {
    return function () {
      return webgl.hint(target, mode);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum GLenum (Eff (webgl :: WebGL | eff) Unit)

foreign import isBufferImpl """
  function isBufferImpl(webgl, buffer) {
    return function () {
      return webgl.isBuffer(buffer);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLBuffer (Eff (webgl :: WebGL | eff) GLboolean)

foreign import isEnabledImpl """
  function isEnabledImpl(webgl, cap) {
    return function () {
      return webgl.isEnabled(cap);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLenum (Eff (webgl :: WebGL | eff) GLboolean)

foreign import isFramebufferImpl """
  function isFramebufferImpl(webgl, framebuffer) {
    return function () {
      return webgl.isFramebuffer(framebuffer);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLFramebuffer (Eff (webgl :: WebGL | eff) GLboolean)

foreign import isProgramImpl """
  function isProgramImpl(webgl, program) {
    return function () {
      return webgl.isProgram(program);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLProgram (Eff (webgl :: WebGL | eff) GLboolean)

foreign import isRenderbufferImpl """
  function isRenderbufferImpl(webgl, renderbuffer) {
    return function () {
      return webgl.isRenderbuffer(renderbuffer);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLRenderbuffer (Eff (webgl :: WebGL | eff) GLboolean)

foreign import isShaderImpl """
  function isShaderImpl(webgl, shader) {
    return function () {
      return webgl.isShader(shader);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLShader (Eff (webgl :: WebGL | eff) GLboolean)

foreign import isTextureImpl """
  function isTextureImpl(webgl, texture) {
    return function () {
      return webgl.isTexture(texture);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLTexture (Eff (webgl :: WebGL | eff) GLboolean)

foreign import lineWidthImpl """
  function lineWidthImpl(webgl, width) {
    return function () {
      return webgl.lineWidth(width);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLfloat (Eff (webgl :: WebGL | eff) Unit)

foreign import linkProgramImpl """
  function linkProgramImpl(webgl, program) {
    return function () {
      return webgl.linkProgram(program);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLProgram (Eff (webgl :: WebGL | eff) Unit)

foreign import pixelStoreiImpl """
  function pixelStoreiImpl(webgl, pname, param) {
    return function () {
      return webgl.pixelStorei(pname, param);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum GLint (Eff (webgl :: WebGL | eff) Unit)

foreign import polygonOffsetImpl """
  function polygonOffsetImpl(webgl, factor, units) {
    return function () {
      return webgl.polygonOffset(factor, units);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLfloat GLfloat (Eff (webgl :: WebGL | eff) Unit)

foreign import readPixelsImpl """
  function readPixelsImpl(webgl, x, y, width, height, format, type, pixels) {
    return function () {
      return webgl.readPixels(x, y, width, height, format, type, pixels);
    };
  }
""" :: forall eff. Fn8 WebGLContext GLint GLint GLsizei GLsizei GLenum GLenum ArrayBufferView (Eff (webgl :: WebGL | eff) Unit)

foreign import renderbufferStorageImpl """
  function renderbufferStorageImpl(webgl, target, internalformat, width, height) {
    return function () {
      return webgl.renderbufferStorage(target, internalformat, width, height);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLenum GLenum GLsizei GLsizei (Eff (webgl :: WebGL | eff) Unit)

foreign import sampleCoverageImpl """
  function sampleCoverageImpl(webgl, value, invert) {
    return function () {
      return webgl.sampleCoverage(value, invert);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLclampf GLboolean (Eff (webgl :: WebGL | eff) Unit)

foreign import scissorImpl """
  function scissorImpl(webgl, x, y, width, height) {
    return function () {
      return webgl.scissor(x, y, width, height);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLint GLint GLsizei GLsizei (Eff (webgl :: WebGL | eff) Unit)

foreign import shaderSourceImpl """
  function shaderSourceImpl(webgl, shader, source) {
    return function () {
      return webgl.shaderSource(shader, source);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLShader DOMString (Eff (webgl :: WebGL | eff) Unit)

foreign import stencilFuncImpl """
  function stencilFuncImpl(webgl, func, ref, mask) {
    return function () {
      return webgl.stencilFunc(func, ref, mask);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLenum GLint GLuint (Eff (webgl :: WebGL | eff) Unit)

foreign import stencilFuncSeparateImpl """
  function stencilFuncSeparateImpl(webgl, face, func, ref, mask) {
    return function () {
      return webgl.stencilFuncSeparate(face, func, ref, mask);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLenum GLenum GLint GLuint (Eff (webgl :: WebGL | eff) Unit)

foreign import stencilMaskImpl """
  function stencilMaskImpl(webgl, mask) {
    return function () {
      return webgl.stencilMask(mask);
    };
  }
""" :: forall eff. Fn2 WebGLContext GLuint (Eff (webgl :: WebGL | eff) Unit)

foreign import stencilMaskSeparateImpl """
  function stencilMaskSeparateImpl(webgl, face, mask) {
    return function () {
      return webgl.stencilMaskSeparate(face, mask);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLenum GLuint (Eff (webgl :: WebGL | eff) Unit)

foreign import stencilOpImpl """
  function stencilOpImpl(webgl, fail, zfail, zpass) {
    return function () {
      return webgl.stencilOp(fail, zfail, zpass);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLenum GLenum GLenum (Eff (webgl :: WebGL | eff) Unit)

foreign import stencilOpSeparateImpl """
  function stencilOpSeparateImpl(webgl, face, fail, zfail, zpass) {
    return function () {
      return webgl.stencilOpSeparate(face, fail, zfail, zpass);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLenum GLenum GLenum GLenum (Eff (webgl :: WebGL | eff) Unit)

foreign import texImage2DImpl """
  function texImage2DImpl(webgl, target, level, internalformat, width, height, border, format, type, pixels) {
    return function () {
      return webgl.texImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    };
  }
""" :: forall eff. Fn10 WebGLContext GLenum GLint GLenum GLsizei GLsizei GLint GLenum GLenum ArrayBufferView (Eff (webgl :: WebGL | eff) Unit)

foreign import texParameterfImpl """
  function texParameterfImpl(webgl, target, pname, param) {
    return function () {
      return webgl.texParameterf(target, pname, param);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLenum GLenum GLfloat (Eff (webgl :: WebGL | eff) Unit)

foreign import texParameteriImpl """
  function texParameteriImpl(webgl, target, pname, param) {
    return function () {
      return webgl.texParameteri(target, pname, param);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLenum GLenum GLint (Eff (webgl :: WebGL | eff) Unit)

foreign import texSubImage2DImpl """
  function texSubImage2DImpl(webgl, target, level, xoffset, yoffset, width, height, format, type, pixels) {
    return function () {
      return webgl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    };
  }
""" :: forall eff. Fn10 WebGLContext GLenum GLint GLint GLint GLsizei GLsizei GLenum GLenum ArrayBufferView (Eff (webgl :: WebGL | eff) Unit)

foreign import uniform1fImpl """
  function uniform1fImpl(webgl, location, x) {
    return function () {
      return webgl.uniform1f(location, x);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation GLfloat (Eff (webgl :: WebGL | eff) Unit)

foreign import uniform1fvImpl """
  function uniform1fvImpl(webgl, location, v) {
    return function () {
      return webgl.uniform1fv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation FloatArray (Eff (webgl :: WebGL | eff) Unit)

foreign import uniform1iImpl """
  function uniform1iImpl(webgl, location, x) {
    return function () {
      return webgl.uniform1i(location, x);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation GLint (Eff (webgl :: WebGL | eff) Unit)

foreign import uniform1ivImpl """
  function uniform1ivImpl(webgl, location, v) {
    return function () {
      return webgl.uniform1iv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation Int32Array (Eff (webgl :: WebGL | eff) Unit)

foreign import uniform2fImpl """
  function uniform2fImpl(webgl, location, x, y) {
    return function () {
      return webgl.uniform2f(location, x, y);
    };
  }
""" :: forall eff. Fn4 WebGLContext WebGLUniformLocation GLfloat GLfloat (Eff (webgl :: WebGL | eff) Unit)

foreign import uniform2fvImpl """
  function uniform2fvImpl(webgl, location, v) {
    return function () {
      return webgl.uniform2fv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation FloatArray (Eff (webgl :: WebGL | eff) Unit)

foreign import uniform2iImpl """
  function uniform2iImpl(webgl, location, x, y) {
    return function () {
      return webgl.uniform2i(location, x, y);
    };
  }
""" :: forall eff. Fn4 WebGLContext WebGLUniformLocation GLint GLint (Eff (webgl :: WebGL | eff) Unit)

foreign import uniform2ivImpl """
  function uniform2ivImpl(webgl, location, v) {
    return function () {
      return webgl.uniform2iv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation Int32Array (Eff (webgl :: WebGL | eff) Unit)

foreign import uniform3fImpl """
  function uniform3fImpl(webgl, location, x, y, z) {
    return function () {
      return webgl.uniform3f(location, x, y, z);
    };
  }
""" :: forall eff. Fn5 WebGLContext WebGLUniformLocation GLfloat GLfloat GLfloat (Eff (webgl :: WebGL | eff) Unit)

foreign import uniform3fvImpl """
  function uniform3fvImpl(webgl, location, v) {
    return function () {
      return webgl.uniform3fv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation FloatArray (Eff (webgl :: WebGL | eff) Unit)

foreign import uniform3iImpl """
  function uniform3iImpl(webgl, location, x, y, z) {
    return function () {
      return webgl.uniform3i(location, x, y, z);
    };
  }
""" :: forall eff. Fn5 WebGLContext WebGLUniformLocation GLint GLint GLint (Eff (webgl :: WebGL | eff) Unit)

foreign import uniform3ivImpl """
  function uniform3ivImpl(webgl, location, v) {
    return function () {
      return webgl.uniform3iv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation Int32Array (Eff (webgl :: WebGL | eff) Unit)

foreign import uniform4fImpl """
  function uniform4fImpl(webgl, location, x, y, z, w) {
    return function () {
      return webgl.uniform4f(location, x, y, z, w);
    };
  }
""" :: forall eff. Fn6 WebGLContext WebGLUniformLocation GLfloat GLfloat GLfloat GLfloat (Eff (webgl :: WebGL | eff) Unit)

foreign import uniform4fvImpl """
  function uniform4fvImpl(webgl, location, v) {
    return function () {
      return webgl.uniform4fv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation FloatArray (Eff (webgl :: WebGL | eff) Unit)

foreign import uniform4iImpl """
  function uniform4iImpl(webgl, location, x, y, z, w) {
    return function () {
      return webgl.uniform4i(location, x, y, z, w);
    };
  }
""" :: forall eff. Fn6 WebGLContext WebGLUniformLocation GLint GLint GLint GLint (Eff (webgl :: WebGL | eff) Unit)

foreign import uniform4ivImpl """
  function uniform4ivImpl(webgl, location, v) {
    return function () {
      return webgl.uniform4iv(location, v);
    };
  }
""" :: forall eff. Fn3 WebGLContext WebGLUniformLocation Int32Array (Eff (webgl :: WebGL | eff) Unit)

foreign import uniformMatrix2fvImpl """
  function uniformMatrix2fvImpl(webgl, location, transpose, value) {
    return function () {
      return webgl.uniformMatrix2fv(location, transpose, value);
    };
  }
""" :: forall eff. Fn4 WebGLContext WebGLUniformLocation GLboolean FloatArray (Eff (webgl :: WebGL | eff) Unit)

foreign import uniformMatrix3fvImpl """
  function uniformMatrix3fvImpl(webgl, location, transpose, value) {
    return function () {
      return webgl.uniformMatrix3fv(location, transpose, value);
    };
  }
""" :: forall eff. Fn4 WebGLContext WebGLUniformLocation GLboolean FloatArray (Eff (webgl :: WebGL | eff) Unit)

foreign import uniformMatrix4fvImpl """
  function uniformMatrix4fvImpl(webgl, location, transpose, value) {
    return function () {
      return webgl.uniformMatrix4fv(location, transpose, value);
    };
  }
""" :: forall eff. Fn4 WebGLContext WebGLUniformLocation GLboolean FloatArray (Eff (webgl :: WebGL | eff) Unit)

foreign import useProgramImpl """
  function useProgramImpl(webgl, program) {
    return function () {
      return webgl.useProgram(program);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLProgram (Eff (webgl :: WebGL | eff) Unit)

foreign import validateProgramImpl """
  function validateProgramImpl(webgl, program) {
    return function () {
      return webgl.validateProgram(program);
    };
  }
""" :: forall eff. Fn2 WebGLContext WebGLProgram (Eff (webgl :: WebGL | eff) Unit)

foreign import vertexAttrib1fImpl """
  function vertexAttrib1fImpl(webgl, indx, x) {
    return function () {
      return webgl.vertexAttrib1f(indx, x);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLuint GLfloat (Eff (webgl :: WebGL | eff) Unit)

foreign import vertexAttrib1fvImpl """
  function vertexAttrib1fvImpl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib1fv(indx, values);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLuint FloatArray (Eff (webgl :: WebGL | eff) Unit)

foreign import vertexAttrib2fImpl """
  function vertexAttrib2fImpl(webgl, indx, x, y) {
    return function () {
      return webgl.vertexAttrib2f(indx, x, y);
    };
  }
""" :: forall eff. Fn4 WebGLContext GLuint GLfloat GLfloat (Eff (webgl :: WebGL | eff) Unit)

foreign import vertexAttrib2fvImpl """
  function vertexAttrib2fvImpl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib2fv(indx, values);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLuint FloatArray (Eff (webgl :: WebGL | eff) Unit)

foreign import vertexAttrib3fImpl """
  function vertexAttrib3fImpl(webgl, indx, x, y, z) {
    return function () {
      return webgl.vertexAttrib3f(indx, x, y, z);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLuint GLfloat GLfloat GLfloat (Eff (webgl :: WebGL | eff) Unit)

foreign import vertexAttrib3fvImpl """
  function vertexAttrib3fvImpl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib3fv(indx, values);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLuint FloatArray (Eff (webgl :: WebGL | eff) Unit)

foreign import vertexAttrib4fImpl """
  function vertexAttrib4fImpl(webgl, indx, x, y, z, w) {
    return function () {
      return webgl.vertexAttrib4f(indx, x, y, z, w);
    };
  }
""" :: forall eff. Fn6 WebGLContext GLuint GLfloat GLfloat GLfloat GLfloat (Eff (webgl :: WebGL | eff) Unit)

foreign import vertexAttrib4fvImpl """
  function vertexAttrib4fvImpl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib4fv(indx, values);
    };
  }
""" :: forall eff. Fn3 WebGLContext GLuint FloatArray (Eff (webgl :: WebGL | eff) Unit)

foreign import vertexAttribPointerImpl """
  function vertexAttribPointerImpl(webgl, indx, size, type, normalized, stride, offset) {
    return function () {
      return webgl.vertexAttribPointer(indx, size, type, normalized, stride, offset);
    };
  }
""" :: forall eff. Fn7 WebGLContext GLuint GLint GLenum GLboolean GLsizei GLintptr (Eff (webgl :: WebGL | eff) Unit)

foreign import viewportImpl """
  function viewportImpl(webgl, x, y, width, height) {
    return function () {
      return webgl.viewport(x, y, width, height);
    };
  }
""" :: forall eff. Fn5 WebGLContext GLint GLint GLsizei GLsizei (Eff (webgl :: WebGL | eff) Unit)

