-- This file is automatically generated! Don't edit this file, but
-- instead modify purescript-webgl-generator.

module Graphics.WebGL.Raw
( getContextAttributes
, isContextLost
, getSupportedExtensions
, getExtension
, activeTexture
, attachShader
, bindAttribLocation
, bindBuffer
, bindFramebuffer
, bindRenderbuffer
, bindTexture
, blendColor
, blendEquation
, blendEquationSeparate
, blendFunc
, blendFuncSeparate
, bufferData
, bufferSubData
, checkFramebufferStatus
, clear
, clearColor
, clearDepth
, clearStencil
, colorMask
, compileShader
, copyTexImage2D
, copyTexSubImage2D
, createBuffer
, createFramebuffer
, createProgram
, createRenderbuffer
, createShader
, createTexture
, cullFace
, deleteBuffer
, deleteFramebuffer
, deleteProgram
, deleteRenderbuffer
, deleteShader
, deleteTexture
, depthFunc
, depthMask
, depthRange
, detachShader
, disable
, disableVertexAttribArray
, drawArrays
, drawElements
, enable
, enableVertexAttribArray
, finish
, flush
, framebufferRenderbuffer
, framebufferTexture2D
, frontFace
, generateMipmap
, getActiveAttrib
, getActiveUniform
, getAttachedShaders
, getAttribLocation
, getParameter
, getBufferParameter
, getError
, getFramebufferAttachmentParameter
, getProgramParameter
, getProgramInfoLog
, getRenderbufferParameter
, getShaderParameter
, getShaderInfoLog
, getShaderSource
, getTexParameter
, getUniform
, getUniformLocation
, getVertexAttrib
, getVertexAttribOffset
, hint
, isBuffer
, isEnabled
, isFramebuffer
, isProgram
, isRenderbuffer
, isShader
, isTexture
, lineWidth
, linkProgram
, pixelStorei
, polygonOffset
, readPixels
, renderbufferStorage
, sampleCoverage
, scissor
, shaderSource
, stencilFunc
, stencilFuncSeparate
, stencilMask
, stencilMaskSeparate
, stencilOp
, stencilOpSeparate
, texImage2D
, texParameterf
, texParameteri
, texSubImage2D
, uniform1f
, uniform1fv
, uniform1i
, uniform1iv
, uniform2f
, uniform2fv
, uniform2i
, uniform2iv
, uniform3f
, uniform3fv
, uniform3i
, uniform3iv
, uniform4f
, uniform4fv
, uniform4i
, uniform4iv
, uniformMatrix2fv
, uniformMatrix3fv
, uniformMatrix4fv
, useProgram
, validateProgram
, vertexAttrib1f
, vertexAttrib1fv
, vertexAttrib2f
, vertexAttrib2fv
, vertexAttrib3f
, vertexAttrib3fv
, vertexAttrib4f
, vertexAttrib4fv
, vertexAttribPointer
, viewport
) where

import Graphics.Canvas (Canvas ())

import Control.Monad.Eff
import Data.ArrayBuffer.Types
import Data.Function
import Graphics.WebGL.Raw.Types

foreign import getContextAttributesImpl """
  function getContextAttributesImpl(webgl) {
    return function () {
      return webgl.getContextAttributes();
    };
  }
""" :: Fn1 WebGLContext (Eff (canvas :: Canvas) WebGLContextAttributes)

getContextAttributes :: WebGLContext -> Eff (canvas :: Canvas) WebGLContextAttributes
getContextAttributes = runFn1 getContextAttributesImpl

foreign import isContextLostImpl """
  function isContextLostImpl(webgl) {
    return function () {
      return webgl.isContextLost();
    };
  }
""" :: Fn1 WebGLContext (Eff (canvas :: Canvas) Boolean)

isContextLost :: WebGLContext -> Eff (canvas :: Canvas) Boolean
isContextLost = runFn1 isContextLostImpl

foreign import getSupportedExtensionsImpl """
  function getSupportedExtensionsImpl(webgl) {
    return function () {
      return webgl.getSupportedExtensions();
    };
  }
""" :: Fn1 WebGLContext (Eff (canvas :: Canvas) [DOMString])

getSupportedExtensions :: WebGLContext -> Eff (canvas :: Canvas) [DOMString]
getSupportedExtensions = runFn1 getSupportedExtensionsImpl

foreign import getExtensionImpl """
  function getExtensionImpl(webgl, name) {
    return function () {
      return webgl.getExtension(name);
    };
  }
""" :: forall a. Fn2 WebGLContext DOMString (Eff (canvas :: Canvas) a)

getExtension :: forall a. WebGLContext -> DOMString -> Eff (canvas :: Canvas) a
getExtension = runFn2 getExtensionImpl

foreign import activeTextureImpl """
  function activeTextureImpl(webgl, texture) {
    return function () {
      return webgl.activeTexture(texture);
    };
  }
""" :: Fn2 WebGLContext GLenum (Eff (canvas :: Canvas) Unit)

activeTexture :: WebGLContext -> GLenum -> Eff (canvas :: Canvas) Unit
activeTexture = runFn2 activeTextureImpl

foreign import attachShaderImpl """
  function attachShaderImpl(webgl, program, shader) {
    return function () {
      return webgl.attachShader(program, shader);
    };
  }
""" :: Fn3 WebGLContext WebGLProgram WebGLShader (Eff (canvas :: Canvas) Unit)

attachShader :: WebGLContext -> WebGLProgram -> WebGLShader -> Eff (canvas :: Canvas) Unit
attachShader = runFn3 attachShaderImpl

foreign import bindAttribLocationImpl """
  function bindAttribLocationImpl(webgl, program, index, name) {
    return function () {
      return webgl.bindAttribLocation(program, index, name);
    };
  }
""" :: Fn4 WebGLContext WebGLProgram GLuint DOMString (Eff (canvas :: Canvas) Unit)

bindAttribLocation :: WebGLContext -> WebGLProgram -> GLuint -> DOMString -> Eff (canvas :: Canvas) Unit
bindAttribLocation = runFn4 bindAttribLocationImpl

foreign import bindBufferImpl """
  function bindBufferImpl(webgl, target, buffer) {
    return function () {
      return webgl.bindBuffer(target, buffer);
    };
  }
""" :: Fn3 WebGLContext GLenum WebGLBuffer (Eff (canvas :: Canvas) Unit)

bindBuffer :: WebGLContext -> GLenum -> WebGLBuffer -> Eff (canvas :: Canvas) Unit
bindBuffer = runFn3 bindBufferImpl

foreign import bindFramebufferImpl """
  function bindFramebufferImpl(webgl, target, framebuffer) {
    return function () {
      return webgl.bindFramebuffer(target, framebuffer);
    };
  }
""" :: Fn3 WebGLContext GLenum WebGLFramebuffer (Eff (canvas :: Canvas) Unit)

bindFramebuffer :: WebGLContext -> GLenum -> WebGLFramebuffer -> Eff (canvas :: Canvas) Unit
bindFramebuffer = runFn3 bindFramebufferImpl

foreign import bindRenderbufferImpl """
  function bindRenderbufferImpl(webgl, target, renderbuffer) {
    return function () {
      return webgl.bindRenderbuffer(target, renderbuffer);
    };
  }
""" :: Fn3 WebGLContext GLenum WebGLRenderbuffer (Eff (canvas :: Canvas) Unit)

bindRenderbuffer :: WebGLContext -> GLenum -> WebGLRenderbuffer -> Eff (canvas :: Canvas) Unit
bindRenderbuffer = runFn3 bindRenderbufferImpl

foreign import bindTextureImpl """
  function bindTextureImpl(webgl, target, texture) {
    return function () {
      return webgl.bindTexture(target, texture);
    };
  }
""" :: Fn3 WebGLContext GLenum WebGLTexture (Eff (canvas :: Canvas) Unit)

bindTexture :: WebGLContext -> GLenum -> WebGLTexture -> Eff (canvas :: Canvas) Unit
bindTexture = runFn3 bindTextureImpl

foreign import blendColorImpl """
  function blendColorImpl(webgl, red, green, blue, alpha) {
    return function () {
      return webgl.blendColor(red, green, blue, alpha);
    };
  }
""" :: Fn5 WebGLContext GLclampf GLclampf GLclampf GLclampf (Eff (canvas :: Canvas) Unit)

blendColor :: WebGLContext -> GLclampf -> GLclampf -> GLclampf -> GLclampf -> Eff (canvas :: Canvas) Unit
blendColor = runFn5 blendColorImpl

foreign import blendEquationImpl """
  function blendEquationImpl(webgl, mode) {
    return function () {
      return webgl.blendEquation(mode);
    };
  }
""" :: Fn2 WebGLContext GLenum (Eff (canvas :: Canvas) Unit)

blendEquation :: WebGLContext -> GLenum -> Eff (canvas :: Canvas) Unit
blendEquation = runFn2 blendEquationImpl

foreign import blendEquationSeparateImpl """
  function blendEquationSeparateImpl(webgl, modeRGB, modeAlpha) {
    return function () {
      return webgl.blendEquationSeparate(modeRGB, modeAlpha);
    };
  }
""" :: Fn3 WebGLContext GLenum GLenum (Eff (canvas :: Canvas) Unit)

blendEquationSeparate :: WebGLContext -> GLenum -> GLenum -> Eff (canvas :: Canvas) Unit
blendEquationSeparate = runFn3 blendEquationSeparateImpl

foreign import blendFuncImpl """
  function blendFuncImpl(webgl, sfactor, dfactor) {
    return function () {
      return webgl.blendFunc(sfactor, dfactor);
    };
  }
""" :: Fn3 WebGLContext GLenum GLenum (Eff (canvas :: Canvas) Unit)

blendFunc :: WebGLContext -> GLenum -> GLenum -> Eff (canvas :: Canvas) Unit
blendFunc = runFn3 blendFuncImpl

foreign import blendFuncSeparateImpl """
  function blendFuncSeparateImpl(webgl, srcRGB, dstRGB, srcAlpha, dstAlpha) {
    return function () {
      return webgl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
    };
  }
""" :: Fn5 WebGLContext GLenum GLenum GLenum GLenum (Eff (canvas :: Canvas) Unit)

blendFuncSeparate :: WebGLContext -> GLenum -> GLenum -> GLenum -> GLenum -> Eff (canvas :: Canvas) Unit
blendFuncSeparate = runFn5 blendFuncSeparateImpl

foreign import bufferDataImpl """
  function bufferDataImpl(webgl, target, data, usage) {
    return function () {
      return webgl.bufferData(target, data, usage);
    };
  }
""" :: Fn4 WebGLContext GLenum Float32Array GLenum (Eff (canvas :: Canvas) Unit)

bufferData :: WebGLContext -> GLenum -> Float32Array -> GLenum -> Eff (canvas :: Canvas) Unit
bufferData = runFn4 bufferDataImpl

foreign import bufferSubDataImpl """
  function bufferSubDataImpl(webgl, target, offset, data) {
    return function () {
      return webgl.bufferSubData(target, offset, data);
    };
  }
""" :: Fn4 WebGLContext GLenum GLintptr ArrayBufferView (Eff (canvas :: Canvas) Unit)

bufferSubData :: WebGLContext -> GLenum -> GLintptr -> ArrayBufferView -> Eff (canvas :: Canvas) Unit
bufferSubData = runFn4 bufferSubDataImpl

foreign import checkFramebufferStatusImpl """
  function checkFramebufferStatusImpl(webgl, target) {
    return function () {
      return webgl.checkFramebufferStatus(target);
    };
  }
""" :: Fn2 WebGLContext GLenum (Eff (canvas :: Canvas) GLenum)

checkFramebufferStatus :: WebGLContext -> GLenum -> Eff (canvas :: Canvas) GLenum
checkFramebufferStatus = runFn2 checkFramebufferStatusImpl

foreign import clearImpl """
  function clearImpl(webgl, mask) {
    return function () {
      return webgl.clear(mask);
    };
  }
""" :: Fn2 WebGLContext GLbitfield (Eff (canvas :: Canvas) Unit)

clear :: WebGLContext -> GLbitfield -> Eff (canvas :: Canvas) Unit
clear = runFn2 clearImpl

foreign import clearColorImpl """
  function clearColorImpl(webgl, red, green, blue, alpha) {
    return function () {
      return webgl.clearColor(red, green, blue, alpha);
    };
  }
""" :: Fn5 WebGLContext GLclampf GLclampf GLclampf GLclampf (Eff (canvas :: Canvas) Unit)

clearColor :: WebGLContext -> GLclampf -> GLclampf -> GLclampf -> GLclampf -> Eff (canvas :: Canvas) Unit
clearColor = runFn5 clearColorImpl

foreign import clearDepthImpl """
  function clearDepthImpl(webgl, depth) {
    return function () {
      return webgl.clearDepth(depth);
    };
  }
""" :: Fn2 WebGLContext GLclampf (Eff (canvas :: Canvas) Unit)

clearDepth :: WebGLContext -> GLclampf -> Eff (canvas :: Canvas) Unit
clearDepth = runFn2 clearDepthImpl

foreign import clearStencilImpl """
  function clearStencilImpl(webgl, s) {
    return function () {
      return webgl.clearStencil(s);
    };
  }
""" :: Fn2 WebGLContext GLint (Eff (canvas :: Canvas) Unit)

clearStencil :: WebGLContext -> GLint -> Eff (canvas :: Canvas) Unit
clearStencil = runFn2 clearStencilImpl

foreign import colorMaskImpl """
  function colorMaskImpl(webgl, red, green, blue, alpha) {
    return function () {
      return webgl.colorMask(red, green, blue, alpha);
    };
  }
""" :: Fn5 WebGLContext GLboolean GLboolean GLboolean GLboolean (Eff (canvas :: Canvas) Unit)

colorMask :: WebGLContext -> GLboolean -> GLboolean -> GLboolean -> GLboolean -> Eff (canvas :: Canvas) Unit
colorMask = runFn5 colorMaskImpl

foreign import compileShaderImpl """
  function compileShaderImpl(webgl, shader) {
    return function () {
      return webgl.compileShader(shader);
    };
  }
""" :: Fn2 WebGLContext WebGLShader (Eff (canvas :: Canvas) Unit)

compileShader :: WebGLContext -> WebGLShader -> Eff (canvas :: Canvas) Unit
compileShader = runFn2 compileShaderImpl

foreign import copyTexImage2DImpl """
  function copyTexImage2DImpl(webgl, target, level, internalformat, x, y, width, height, border) {
    return function () {
      return webgl.copyTexImage2D(target, level, internalformat, x, y, width, height, border);
    };
  }
""" :: Fn9 WebGLContext GLenum GLint GLenum GLint GLint GLsizei GLsizei GLint (Eff (canvas :: Canvas) Unit)

copyTexImage2D :: WebGLContext -> GLenum -> GLint -> GLenum -> GLint -> GLint -> GLsizei -> GLsizei -> GLint -> Eff (canvas :: Canvas) Unit
copyTexImage2D = runFn9 copyTexImage2DImpl

foreign import copyTexSubImage2DImpl """
  function copyTexSubImage2DImpl(webgl, target, level, xoffset, yoffset, x, y, width, height) {
    return function () {
      return webgl.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    };
  }
""" :: Fn9 WebGLContext GLenum GLint GLint GLint GLint GLint GLsizei GLsizei (Eff (canvas :: Canvas) Unit)

copyTexSubImage2D :: WebGLContext -> GLenum -> GLint -> GLint -> GLint -> GLint -> GLint -> GLsizei -> GLsizei -> Eff (canvas :: Canvas) Unit
copyTexSubImage2D = runFn9 copyTexSubImage2DImpl

foreign import createBufferImpl """
  function createBufferImpl(webgl) {
    return function () {
      return webgl.createBuffer();
    };
  }
""" :: Fn1 WebGLContext (Eff (canvas :: Canvas) WebGLBuffer)

createBuffer :: WebGLContext -> Eff (canvas :: Canvas) WebGLBuffer
createBuffer = runFn1 createBufferImpl

foreign import createFramebufferImpl """
  function createFramebufferImpl(webgl) {
    return function () {
      return webgl.createFramebuffer();
    };
  }
""" :: Fn1 WebGLContext (Eff (canvas :: Canvas) WebGLFramebuffer)

createFramebuffer :: WebGLContext -> Eff (canvas :: Canvas) WebGLFramebuffer
createFramebuffer = runFn1 createFramebufferImpl

foreign import createProgramImpl """
  function createProgramImpl(webgl) {
    return function () {
      return webgl.createProgram();
    };
  }
""" :: Fn1 WebGLContext (Eff (canvas :: Canvas) WebGLProgram)

createProgram :: WebGLContext -> Eff (canvas :: Canvas) WebGLProgram
createProgram = runFn1 createProgramImpl

foreign import createRenderbufferImpl """
  function createRenderbufferImpl(webgl) {
    return function () {
      return webgl.createRenderbuffer();
    };
  }
""" :: Fn1 WebGLContext (Eff (canvas :: Canvas) WebGLRenderbuffer)

createRenderbuffer :: WebGLContext -> Eff (canvas :: Canvas) WebGLRenderbuffer
createRenderbuffer = runFn1 createRenderbufferImpl

foreign import createShaderImpl """
  function createShaderImpl(webgl, type) {
    return function () {
      return webgl.createShader(type);
    };
  }
""" :: Fn2 WebGLContext GLenum (Eff (canvas :: Canvas) WebGLShader)

createShader :: WebGLContext -> GLenum -> Eff (canvas :: Canvas) WebGLShader
createShader = runFn2 createShaderImpl

foreign import createTextureImpl """
  function createTextureImpl(webgl) {
    return function () {
      return webgl.createTexture();
    };
  }
""" :: Fn1 WebGLContext (Eff (canvas :: Canvas) WebGLTexture)

createTexture :: WebGLContext -> Eff (canvas :: Canvas) WebGLTexture
createTexture = runFn1 createTextureImpl

foreign import cullFaceImpl """
  function cullFaceImpl(webgl, mode) {
    return function () {
      return webgl.cullFace(mode);
    };
  }
""" :: Fn2 WebGLContext GLenum (Eff (canvas :: Canvas) Unit)

cullFace :: WebGLContext -> GLenum -> Eff (canvas :: Canvas) Unit
cullFace = runFn2 cullFaceImpl

foreign import deleteBufferImpl """
  function deleteBufferImpl(webgl, buffer) {
    return function () {
      return webgl.deleteBuffer(buffer);
    };
  }
""" :: Fn2 WebGLContext WebGLBuffer (Eff (canvas :: Canvas) Unit)

deleteBuffer :: WebGLContext -> WebGLBuffer -> Eff (canvas :: Canvas) Unit
deleteBuffer = runFn2 deleteBufferImpl

foreign import deleteFramebufferImpl """
  function deleteFramebufferImpl(webgl, framebuffer) {
    return function () {
      return webgl.deleteFramebuffer(framebuffer);
    };
  }
""" :: Fn2 WebGLContext WebGLFramebuffer (Eff (canvas :: Canvas) Unit)

deleteFramebuffer :: WebGLContext -> WebGLFramebuffer -> Eff (canvas :: Canvas) Unit
deleteFramebuffer = runFn2 deleteFramebufferImpl

foreign import deleteProgramImpl """
  function deleteProgramImpl(webgl, program) {
    return function () {
      return webgl.deleteProgram(program);
    };
  }
""" :: Fn2 WebGLContext WebGLProgram (Eff (canvas :: Canvas) Unit)

deleteProgram :: WebGLContext -> WebGLProgram -> Eff (canvas :: Canvas) Unit
deleteProgram = runFn2 deleteProgramImpl

foreign import deleteRenderbufferImpl """
  function deleteRenderbufferImpl(webgl, renderbuffer) {
    return function () {
      return webgl.deleteRenderbuffer(renderbuffer);
    };
  }
""" :: Fn2 WebGLContext WebGLRenderbuffer (Eff (canvas :: Canvas) Unit)

deleteRenderbuffer :: WebGLContext -> WebGLRenderbuffer -> Eff (canvas :: Canvas) Unit
deleteRenderbuffer = runFn2 deleteRenderbufferImpl

foreign import deleteShaderImpl """
  function deleteShaderImpl(webgl, shader) {
    return function () {
      return webgl.deleteShader(shader);
    };
  }
""" :: Fn2 WebGLContext WebGLShader (Eff (canvas :: Canvas) Unit)

deleteShader :: WebGLContext -> WebGLShader -> Eff (canvas :: Canvas) Unit
deleteShader = runFn2 deleteShaderImpl

foreign import deleteTextureImpl """
  function deleteTextureImpl(webgl, texture) {
    return function () {
      return webgl.deleteTexture(texture);
    };
  }
""" :: Fn2 WebGLContext WebGLTexture (Eff (canvas :: Canvas) Unit)

deleteTexture :: WebGLContext -> WebGLTexture -> Eff (canvas :: Canvas) Unit
deleteTexture = runFn2 deleteTextureImpl

foreign import depthFuncImpl """
  function depthFuncImpl(webgl, func) {
    return function () {
      return webgl.depthFunc(func);
    };
  }
""" :: Fn2 WebGLContext GLenum (Eff (canvas :: Canvas) Unit)

depthFunc :: WebGLContext -> GLenum -> Eff (canvas :: Canvas) Unit
depthFunc = runFn2 depthFuncImpl

foreign import depthMaskImpl """
  function depthMaskImpl(webgl, flag) {
    return function () {
      return webgl.depthMask(flag);
    };
  }
""" :: Fn2 WebGLContext GLboolean (Eff (canvas :: Canvas) Unit)

depthMask :: WebGLContext -> GLboolean -> Eff (canvas :: Canvas) Unit
depthMask = runFn2 depthMaskImpl

foreign import depthRangeImpl """
  function depthRangeImpl(webgl, zNear, zFar) {
    return function () {
      return webgl.depthRange(zNear, zFar);
    };
  }
""" :: Fn3 WebGLContext GLclampf GLclampf (Eff (canvas :: Canvas) Unit)

depthRange :: WebGLContext -> GLclampf -> GLclampf -> Eff (canvas :: Canvas) Unit
depthRange = runFn3 depthRangeImpl

foreign import detachShaderImpl """
  function detachShaderImpl(webgl, program, shader) {
    return function () {
      return webgl.detachShader(program, shader);
    };
  }
""" :: Fn3 WebGLContext WebGLProgram WebGLShader (Eff (canvas :: Canvas) Unit)

detachShader :: WebGLContext -> WebGLProgram -> WebGLShader -> Eff (canvas :: Canvas) Unit
detachShader = runFn3 detachShaderImpl

foreign import disableImpl """
  function disableImpl(webgl, cap) {
    return function () {
      return webgl.disable(cap);
    };
  }
""" :: Fn2 WebGLContext GLenum (Eff (canvas :: Canvas) Unit)

disable :: WebGLContext -> GLenum -> Eff (canvas :: Canvas) Unit
disable = runFn2 disableImpl

foreign import disableVertexAttribArrayImpl """
  function disableVertexAttribArrayImpl(webgl, index) {
    return function () {
      return webgl.disableVertexAttribArray(index);
    };
  }
""" :: Fn2 WebGLContext GLuint (Eff (canvas :: Canvas) Unit)

disableVertexAttribArray :: WebGLContext -> GLuint -> Eff (canvas :: Canvas) Unit
disableVertexAttribArray = runFn2 disableVertexAttribArrayImpl

foreign import drawArraysImpl """
  function drawArraysImpl(webgl, mode, first, count) {
    return function () {
      return webgl.drawArrays(mode, first, count);
    };
  }
""" :: Fn4 WebGLContext GLenum GLint GLsizei (Eff (canvas :: Canvas) Unit)

drawArrays :: WebGLContext -> GLenum -> GLint -> GLsizei -> Eff (canvas :: Canvas) Unit
drawArrays = runFn4 drawArraysImpl

foreign import drawElementsImpl """
  function drawElementsImpl(webgl, mode, count, type, offset) {
    return function () {
      return webgl.drawElements(mode, count, type, offset);
    };
  }
""" :: Fn5 WebGLContext GLenum GLsizei GLenum GLintptr (Eff (canvas :: Canvas) Unit)

drawElements :: WebGLContext -> GLenum -> GLsizei -> GLenum -> GLintptr -> Eff (canvas :: Canvas) Unit
drawElements = runFn5 drawElementsImpl

foreign import enableImpl """
  function enableImpl(webgl, cap) {
    return function () {
      return webgl.enable(cap);
    };
  }
""" :: Fn2 WebGLContext GLenum (Eff (canvas :: Canvas) Unit)

enable :: WebGLContext -> GLenum -> Eff (canvas :: Canvas) Unit
enable = runFn2 enableImpl

foreign import enableVertexAttribArrayImpl """
  function enableVertexAttribArrayImpl(webgl, index) {
    return function () {
      return webgl.enableVertexAttribArray(index);
    };
  }
""" :: Fn2 WebGLContext GLuint (Eff (canvas :: Canvas) Unit)

enableVertexAttribArray :: WebGLContext -> GLuint -> Eff (canvas :: Canvas) Unit
enableVertexAttribArray = runFn2 enableVertexAttribArrayImpl

foreign import finishImpl """
  function finishImpl(webgl) {
    return function () {
      return webgl.finish();
    };
  }
""" :: Fn1 WebGLContext (Eff (canvas :: Canvas) Unit)

finish :: WebGLContext -> Eff (canvas :: Canvas) Unit
finish = runFn1 finishImpl

foreign import flushImpl """
  function flushImpl(webgl) {
    return function () {
      return webgl.flush();
    };
  }
""" :: Fn1 WebGLContext (Eff (canvas :: Canvas) Unit)

flush :: WebGLContext -> Eff (canvas :: Canvas) Unit
flush = runFn1 flushImpl

foreign import framebufferRenderbufferImpl """
  function framebufferRenderbufferImpl(webgl, target, attachment, renderbuffertarget, renderbuffer) {
    return function () {
      return webgl.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    };
  }
""" :: Fn5 WebGLContext GLenum GLenum GLenum WebGLRenderbuffer (Eff (canvas :: Canvas) Unit)

framebufferRenderbuffer :: WebGLContext -> GLenum -> GLenum -> GLenum -> WebGLRenderbuffer -> Eff (canvas :: Canvas) Unit
framebufferRenderbuffer = runFn5 framebufferRenderbufferImpl

foreign import framebufferTexture2DImpl """
  function framebufferTexture2DImpl(webgl, target, attachment, textarget, texture, level) {
    return function () {
      return webgl.framebufferTexture2D(target, attachment, textarget, texture, level);
    };
  }
""" :: Fn6 WebGLContext GLenum GLenum GLenum WebGLTexture GLint (Eff (canvas :: Canvas) Unit)

framebufferTexture2D :: WebGLContext -> GLenum -> GLenum -> GLenum -> WebGLTexture -> GLint -> Eff (canvas :: Canvas) Unit
framebufferTexture2D = runFn6 framebufferTexture2DImpl

foreign import frontFaceImpl """
  function frontFaceImpl(webgl, mode) {
    return function () {
      return webgl.frontFace(mode);
    };
  }
""" :: Fn2 WebGLContext GLenum (Eff (canvas :: Canvas) Unit)

frontFace :: WebGLContext -> GLenum -> Eff (canvas :: Canvas) Unit
frontFace = runFn2 frontFaceImpl

foreign import generateMipmapImpl """
  function generateMipmapImpl(webgl, target) {
    return function () {
      return webgl.generateMipmap(target);
    };
  }
""" :: Fn2 WebGLContext GLenum (Eff (canvas :: Canvas) Unit)

generateMipmap :: WebGLContext -> GLenum -> Eff (canvas :: Canvas) Unit
generateMipmap = runFn2 generateMipmapImpl

foreign import getActiveAttribImpl """
  function getActiveAttribImpl(webgl, program, index) {
    return function () {
      return webgl.getActiveAttrib(program, index);
    };
  }
""" :: Fn3 WebGLContext WebGLProgram GLuint (Eff (canvas :: Canvas) WebGLActiveInfo)

getActiveAttrib :: WebGLContext -> WebGLProgram -> GLuint -> Eff (canvas :: Canvas) WebGLActiveInfo
getActiveAttrib = runFn3 getActiveAttribImpl

foreign import getActiveUniformImpl """
  function getActiveUniformImpl(webgl, program, index) {
    return function () {
      return webgl.getActiveUniform(program, index);
    };
  }
""" :: Fn3 WebGLContext WebGLProgram GLuint (Eff (canvas :: Canvas) WebGLActiveInfo)

getActiveUniform :: WebGLContext -> WebGLProgram -> GLuint -> Eff (canvas :: Canvas) WebGLActiveInfo
getActiveUniform = runFn3 getActiveUniformImpl

foreign import getAttachedShadersImpl """
  function getAttachedShadersImpl(webgl, program) {
    return function () {
      return webgl.getAttachedShaders(program);
    };
  }
""" :: Fn2 WebGLContext WebGLProgram (Eff (canvas :: Canvas) [WebGLShader])

getAttachedShaders :: WebGLContext -> WebGLProgram -> Eff (canvas :: Canvas) [WebGLShader]
getAttachedShaders = runFn2 getAttachedShadersImpl

foreign import getAttribLocationImpl """
  function getAttribLocationImpl(webgl, program, name) {
    return function () {
      return webgl.getAttribLocation(program, name);
    };
  }
""" :: Fn3 WebGLContext WebGLProgram DOMString (Eff (canvas :: Canvas) GLint)

getAttribLocation :: WebGLContext -> WebGLProgram -> DOMString -> Eff (canvas :: Canvas) GLint
getAttribLocation = runFn3 getAttribLocationImpl

foreign import getParameterImpl """
  function getParameterImpl(webgl, pname) {
    return function () {
      return webgl.getParameter(pname);
    };
  }
""" :: forall a. Fn2 WebGLContext GLenum (Eff (canvas :: Canvas) a)

getParameter :: forall a. WebGLContext -> GLenum -> Eff (canvas :: Canvas) a
getParameter = runFn2 getParameterImpl

foreign import getBufferParameterImpl """
  function getBufferParameterImpl(webgl, target, pname) {
    return function () {
      return webgl.getBufferParameter(target, pname);
    };
  }
""" :: forall a. Fn3 WebGLContext GLenum GLenum (Eff (canvas :: Canvas) a)

getBufferParameter :: forall a. WebGLContext -> GLenum -> GLenum -> Eff (canvas :: Canvas) a
getBufferParameter = runFn3 getBufferParameterImpl

foreign import getErrorImpl """
  function getErrorImpl(webgl) {
    return function () {
      return webgl.getError();
    };
  }
""" :: Fn1 WebGLContext (Eff (canvas :: Canvas) GLenum)

getError :: WebGLContext -> Eff (canvas :: Canvas) GLenum
getError = runFn1 getErrorImpl

foreign import getFramebufferAttachmentParameterImpl """
  function getFramebufferAttachmentParameterImpl(webgl, target, attachment, pname) {
    return function () {
      return webgl.getFramebufferAttachmentParameter(target, attachment, pname);
    };
  }
""" :: forall a. Fn4 WebGLContext GLenum GLenum GLenum (Eff (canvas :: Canvas) a)

getFramebufferAttachmentParameter :: forall a. WebGLContext -> GLenum -> GLenum -> GLenum -> Eff (canvas :: Canvas) a
getFramebufferAttachmentParameter = runFn4 getFramebufferAttachmentParameterImpl

foreign import getProgramParameterImpl """
  function getProgramParameterImpl(webgl, program, pname) {
    return function () {
      return webgl.getProgramParameter(program, pname);
    };
  }
""" :: forall a. Fn3 WebGLContext WebGLProgram GLenum (Eff (canvas :: Canvas) a)

getProgramParameter :: forall a. WebGLContext -> WebGLProgram -> GLenum -> Eff (canvas :: Canvas) a
getProgramParameter = runFn3 getProgramParameterImpl

foreign import getProgramInfoLogImpl """
  function getProgramInfoLogImpl(webgl, program) {
    return function () {
      return webgl.getProgramInfoLog(program);
    };
  }
""" :: Fn2 WebGLContext WebGLProgram (Eff (canvas :: Canvas) DOMString)

getProgramInfoLog :: WebGLContext -> WebGLProgram -> Eff (canvas :: Canvas) DOMString
getProgramInfoLog = runFn2 getProgramInfoLogImpl

foreign import getRenderbufferParameterImpl """
  function getRenderbufferParameterImpl(webgl, target, pname) {
    return function () {
      return webgl.getRenderbufferParameter(target, pname);
    };
  }
""" :: forall a. Fn3 WebGLContext GLenum GLenum (Eff (canvas :: Canvas) a)

getRenderbufferParameter :: forall a. WebGLContext -> GLenum -> GLenum -> Eff (canvas :: Canvas) a
getRenderbufferParameter = runFn3 getRenderbufferParameterImpl

foreign import getShaderParameterImpl """
  function getShaderParameterImpl(webgl, shader, pname) {
    return function () {
      return webgl.getShaderParameter(shader, pname);
    };
  }
""" :: forall a. Fn3 WebGLContext WebGLShader GLenum (Eff (canvas :: Canvas) a)

getShaderParameter :: forall a. WebGLContext -> WebGLShader -> GLenum -> Eff (canvas :: Canvas) a
getShaderParameter = runFn3 getShaderParameterImpl

foreign import getShaderInfoLogImpl """
  function getShaderInfoLogImpl(webgl, shader) {
    return function () {
      return webgl.getShaderInfoLog(shader);
    };
  }
""" :: Fn2 WebGLContext WebGLShader (Eff (canvas :: Canvas) DOMString)

getShaderInfoLog :: WebGLContext -> WebGLShader -> Eff (canvas :: Canvas) DOMString
getShaderInfoLog = runFn2 getShaderInfoLogImpl

foreign import getShaderSourceImpl """
  function getShaderSourceImpl(webgl, shader) {
    return function () {
      return webgl.getShaderSource(shader);
    };
  }
""" :: Fn2 WebGLContext WebGLShader (Eff (canvas :: Canvas) DOMString)

getShaderSource :: WebGLContext -> WebGLShader -> Eff (canvas :: Canvas) DOMString
getShaderSource = runFn2 getShaderSourceImpl

foreign import getTexParameterImpl """
  function getTexParameterImpl(webgl, target, pname) {
    return function () {
      return webgl.getTexParameter(target, pname);
    };
  }
""" :: forall a. Fn3 WebGLContext GLenum GLenum (Eff (canvas :: Canvas) a)

getTexParameter :: forall a. WebGLContext -> GLenum -> GLenum -> Eff (canvas :: Canvas) a
getTexParameter = runFn3 getTexParameterImpl

foreign import getUniformImpl """
  function getUniformImpl(webgl, program, location) {
    return function () {
      return webgl.getUniform(program, location);
    };
  }
""" :: forall a. Fn3 WebGLContext WebGLProgram WebGLUniformLocation (Eff (canvas :: Canvas) a)

getUniform :: forall a. WebGLContext -> WebGLProgram -> WebGLUniformLocation -> Eff (canvas :: Canvas) a
getUniform = runFn3 getUniformImpl

foreign import getUniformLocationImpl """
  function getUniformLocationImpl(webgl, program, name) {
    return function () {
      return webgl.getUniformLocation(program, name);
    };
  }
""" :: Fn3 WebGLContext WebGLProgram DOMString (Eff (canvas :: Canvas) WebGLUniformLocation)

getUniformLocation :: WebGLContext -> WebGLProgram -> DOMString -> Eff (canvas :: Canvas) WebGLUniformLocation
getUniformLocation = runFn3 getUniformLocationImpl

foreign import getVertexAttribImpl """
  function getVertexAttribImpl(webgl, index, pname) {
    return function () {
      return webgl.getVertexAttrib(index, pname);
    };
  }
""" :: forall a. Fn3 WebGLContext GLuint GLenum (Eff (canvas :: Canvas) a)

getVertexAttrib :: forall a. WebGLContext -> GLuint -> GLenum -> Eff (canvas :: Canvas) a
getVertexAttrib = runFn3 getVertexAttribImpl

foreign import getVertexAttribOffsetImpl """
  function getVertexAttribOffsetImpl(webgl, index, pname) {
    return function () {
      return webgl.getVertexAttribOffset(index, pname);
    };
  }
""" :: Fn3 WebGLContext GLuint GLenum (Eff (canvas :: Canvas) GLsizeiptr)

getVertexAttribOffset :: WebGLContext -> GLuint -> GLenum -> Eff (canvas :: Canvas) GLsizeiptr
getVertexAttribOffset = runFn3 getVertexAttribOffsetImpl

foreign import hintImpl """
  function hintImpl(webgl, target, mode) {
    return function () {
      return webgl.hint(target, mode);
    };
  }
""" :: Fn3 WebGLContext GLenum GLenum (Eff (canvas :: Canvas) Unit)

hint :: WebGLContext -> GLenum -> GLenum -> Eff (canvas :: Canvas) Unit
hint = runFn3 hintImpl

foreign import isBufferImpl """
  function isBufferImpl(webgl, buffer) {
    return function () {
      return webgl.isBuffer(buffer);
    };
  }
""" :: Fn2 WebGLContext WebGLBuffer (Eff (canvas :: Canvas) GLboolean)

isBuffer :: WebGLContext -> WebGLBuffer -> Eff (canvas :: Canvas) GLboolean
isBuffer = runFn2 isBufferImpl

foreign import isEnabledImpl """
  function isEnabledImpl(webgl, cap) {
    return function () {
      return webgl.isEnabled(cap);
    };
  }
""" :: Fn2 WebGLContext GLenum (Eff (canvas :: Canvas) GLboolean)

isEnabled :: WebGLContext -> GLenum -> Eff (canvas :: Canvas) GLboolean
isEnabled = runFn2 isEnabledImpl

foreign import isFramebufferImpl """
  function isFramebufferImpl(webgl, framebuffer) {
    return function () {
      return webgl.isFramebuffer(framebuffer);
    };
  }
""" :: Fn2 WebGLContext WebGLFramebuffer (Eff (canvas :: Canvas) GLboolean)

isFramebuffer :: WebGLContext -> WebGLFramebuffer -> Eff (canvas :: Canvas) GLboolean
isFramebuffer = runFn2 isFramebufferImpl

foreign import isProgramImpl """
  function isProgramImpl(webgl, program) {
    return function () {
      return webgl.isProgram(program);
    };
  }
""" :: Fn2 WebGLContext WebGLProgram (Eff (canvas :: Canvas) GLboolean)

isProgram :: WebGLContext -> WebGLProgram -> Eff (canvas :: Canvas) GLboolean
isProgram = runFn2 isProgramImpl

foreign import isRenderbufferImpl """
  function isRenderbufferImpl(webgl, renderbuffer) {
    return function () {
      return webgl.isRenderbuffer(renderbuffer);
    };
  }
""" :: Fn2 WebGLContext WebGLRenderbuffer (Eff (canvas :: Canvas) GLboolean)

isRenderbuffer :: WebGLContext -> WebGLRenderbuffer -> Eff (canvas :: Canvas) GLboolean
isRenderbuffer = runFn2 isRenderbufferImpl

foreign import isShaderImpl """
  function isShaderImpl(webgl, shader) {
    return function () {
      return webgl.isShader(shader);
    };
  }
""" :: Fn2 WebGLContext WebGLShader (Eff (canvas :: Canvas) GLboolean)

isShader :: WebGLContext -> WebGLShader -> Eff (canvas :: Canvas) GLboolean
isShader = runFn2 isShaderImpl

foreign import isTextureImpl """
  function isTextureImpl(webgl, texture) {
    return function () {
      return webgl.isTexture(texture);
    };
  }
""" :: Fn2 WebGLContext WebGLTexture (Eff (canvas :: Canvas) GLboolean)

isTexture :: WebGLContext -> WebGLTexture -> Eff (canvas :: Canvas) GLboolean
isTexture = runFn2 isTextureImpl

foreign import lineWidthImpl """
  function lineWidthImpl(webgl, width) {
    return function () {
      return webgl.lineWidth(width);
    };
  }
""" :: Fn2 WebGLContext GLfloat (Eff (canvas :: Canvas) Unit)

lineWidth :: WebGLContext -> GLfloat -> Eff (canvas :: Canvas) Unit
lineWidth = runFn2 lineWidthImpl

foreign import linkProgramImpl """
  function linkProgramImpl(webgl, program) {
    return function () {
      return webgl.linkProgram(program);
    };
  }
""" :: Fn2 WebGLContext WebGLProgram (Eff (canvas :: Canvas) Unit)

linkProgram :: WebGLContext -> WebGLProgram -> Eff (canvas :: Canvas) Unit
linkProgram = runFn2 linkProgramImpl

foreign import pixelStoreiImpl """
  function pixelStoreiImpl(webgl, pname, param) {
    return function () {
      return webgl.pixelStorei(pname, param);
    };
  }
""" :: Fn3 WebGLContext GLenum GLint (Eff (canvas :: Canvas) Unit)

pixelStorei :: WebGLContext -> GLenum -> GLint -> Eff (canvas :: Canvas) Unit
pixelStorei = runFn3 pixelStoreiImpl

foreign import polygonOffsetImpl """
  function polygonOffsetImpl(webgl, factor, units) {
    return function () {
      return webgl.polygonOffset(factor, units);
    };
  }
""" :: Fn3 WebGLContext GLfloat GLfloat (Eff (canvas :: Canvas) Unit)

polygonOffset :: WebGLContext -> GLfloat -> GLfloat -> Eff (canvas :: Canvas) Unit
polygonOffset = runFn3 polygonOffsetImpl

foreign import readPixelsImpl """
  function readPixelsImpl(webgl, x, y, width, height, format, type, pixels) {
    return function () {
      return webgl.readPixels(x, y, width, height, format, type, pixels);
    };
  }
""" :: Fn8 WebGLContext GLint GLint GLsizei GLsizei GLenum GLenum ArrayBufferView (Eff (canvas :: Canvas) Unit)

readPixels :: WebGLContext -> GLint -> GLint -> GLsizei -> GLsizei -> GLenum -> GLenum -> ArrayBufferView -> Eff (canvas :: Canvas) Unit
readPixels = runFn8 readPixelsImpl

foreign import renderbufferStorageImpl """
  function renderbufferStorageImpl(webgl, target, internalformat, width, height) {
    return function () {
      return webgl.renderbufferStorage(target, internalformat, width, height);
    };
  }
""" :: Fn5 WebGLContext GLenum GLenum GLsizei GLsizei (Eff (canvas :: Canvas) Unit)

renderbufferStorage :: WebGLContext -> GLenum -> GLenum -> GLsizei -> GLsizei -> Eff (canvas :: Canvas) Unit
renderbufferStorage = runFn5 renderbufferStorageImpl

foreign import sampleCoverageImpl """
  function sampleCoverageImpl(webgl, value, invert) {
    return function () {
      return webgl.sampleCoverage(value, invert);
    };
  }
""" :: Fn3 WebGLContext GLclampf GLboolean (Eff (canvas :: Canvas) Unit)

sampleCoverage :: WebGLContext -> GLclampf -> GLboolean -> Eff (canvas :: Canvas) Unit
sampleCoverage = runFn3 sampleCoverageImpl

foreign import scissorImpl """
  function scissorImpl(webgl, x, y, width, height) {
    return function () {
      return webgl.scissor(x, y, width, height);
    };
  }
""" :: Fn5 WebGLContext GLint GLint GLsizei GLsizei (Eff (canvas :: Canvas) Unit)

scissor :: WebGLContext -> GLint -> GLint -> GLsizei -> GLsizei -> Eff (canvas :: Canvas) Unit
scissor = runFn5 scissorImpl

foreign import shaderSourceImpl """
  function shaderSourceImpl(webgl, shader, source) {
    return function () {
      return webgl.shaderSource(shader, source);
    };
  }
""" :: Fn3 WebGLContext WebGLShader DOMString (Eff (canvas :: Canvas) Unit)

shaderSource :: WebGLContext -> WebGLShader -> DOMString -> Eff (canvas :: Canvas) Unit
shaderSource = runFn3 shaderSourceImpl

foreign import stencilFuncImpl """
  function stencilFuncImpl(webgl, func, ref, mask) {
    return function () {
      return webgl.stencilFunc(func, ref, mask);
    };
  }
""" :: Fn4 WebGLContext GLenum GLint GLuint (Eff (canvas :: Canvas) Unit)

stencilFunc :: WebGLContext -> GLenum -> GLint -> GLuint -> Eff (canvas :: Canvas) Unit
stencilFunc = runFn4 stencilFuncImpl

foreign import stencilFuncSeparateImpl """
  function stencilFuncSeparateImpl(webgl, face, func, ref, mask) {
    return function () {
      return webgl.stencilFuncSeparate(face, func, ref, mask);
    };
  }
""" :: Fn5 WebGLContext GLenum GLenum GLint GLuint (Eff (canvas :: Canvas) Unit)

stencilFuncSeparate :: WebGLContext -> GLenum -> GLenum -> GLint -> GLuint -> Eff (canvas :: Canvas) Unit
stencilFuncSeparate = runFn5 stencilFuncSeparateImpl

foreign import stencilMaskImpl """
  function stencilMaskImpl(webgl, mask) {
    return function () {
      return webgl.stencilMask(mask);
    };
  }
""" :: Fn2 WebGLContext GLuint (Eff (canvas :: Canvas) Unit)

stencilMask :: WebGLContext -> GLuint -> Eff (canvas :: Canvas) Unit
stencilMask = runFn2 stencilMaskImpl

foreign import stencilMaskSeparateImpl """
  function stencilMaskSeparateImpl(webgl, face, mask) {
    return function () {
      return webgl.stencilMaskSeparate(face, mask);
    };
  }
""" :: Fn3 WebGLContext GLenum GLuint (Eff (canvas :: Canvas) Unit)

stencilMaskSeparate :: WebGLContext -> GLenum -> GLuint -> Eff (canvas :: Canvas) Unit
stencilMaskSeparate = runFn3 stencilMaskSeparateImpl

foreign import stencilOpImpl """
  function stencilOpImpl(webgl, fail, zfail, zpass) {
    return function () {
      return webgl.stencilOp(fail, zfail, zpass);
    };
  }
""" :: Fn4 WebGLContext GLenum GLenum GLenum (Eff (canvas :: Canvas) Unit)

stencilOp :: WebGLContext -> GLenum -> GLenum -> GLenum -> Eff (canvas :: Canvas) Unit
stencilOp = runFn4 stencilOpImpl

foreign import stencilOpSeparateImpl """
  function stencilOpSeparateImpl(webgl, face, fail, zfail, zpass) {
    return function () {
      return webgl.stencilOpSeparate(face, fail, zfail, zpass);
    };
  }
""" :: Fn5 WebGLContext GLenum GLenum GLenum GLenum (Eff (canvas :: Canvas) Unit)

stencilOpSeparate :: WebGLContext -> GLenum -> GLenum -> GLenum -> GLenum -> Eff (canvas :: Canvas) Unit
stencilOpSeparate = runFn5 stencilOpSeparateImpl

foreign import texImage2DImpl """
  function texImage2DImpl(webgl, target, level, internalformat, width, height, border, format, type, pixels) {
    return function () {
      return webgl.texImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    };
  }
""" :: Fn10 WebGLContext GLenum GLint GLenum GLsizei GLsizei GLint GLenum GLenum ArrayBufferView (Eff (canvas :: Canvas) Unit)

texImage2D :: WebGLContext -> GLenum -> GLint -> GLenum -> GLsizei -> GLsizei -> GLint -> GLenum -> GLenum -> ArrayBufferView -> Eff (canvas :: Canvas) Unit
texImage2D = runFn10 texImage2DImpl

foreign import texParameterfImpl """
  function texParameterfImpl(webgl, target, pname, param) {
    return function () {
      return webgl.texParameterf(target, pname, param);
    };
  }
""" :: Fn4 WebGLContext GLenum GLenum GLfloat (Eff (canvas :: Canvas) Unit)

texParameterf :: WebGLContext -> GLenum -> GLenum -> GLfloat -> Eff (canvas :: Canvas) Unit
texParameterf = runFn4 texParameterfImpl

foreign import texParameteriImpl """
  function texParameteriImpl(webgl, target, pname, param) {
    return function () {
      return webgl.texParameteri(target, pname, param);
    };
  }
""" :: Fn4 WebGLContext GLenum GLenum GLint (Eff (canvas :: Canvas) Unit)

texParameteri :: WebGLContext -> GLenum -> GLenum -> GLint -> Eff (canvas :: Canvas) Unit
texParameteri = runFn4 texParameteriImpl

foreign import texSubImage2DImpl """
  function texSubImage2DImpl(webgl, target, level, xoffset, yoffset, width, height, format, type, pixels) {
    return function () {
      return webgl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    };
  }
""" :: Fn10 WebGLContext GLenum GLint GLint GLint GLsizei GLsizei GLenum GLenum ArrayBufferView (Eff (canvas :: Canvas) Unit)

texSubImage2D :: WebGLContext -> GLenum -> GLint -> GLint -> GLint -> GLsizei -> GLsizei -> GLenum -> GLenum -> ArrayBufferView -> Eff (canvas :: Canvas) Unit
texSubImage2D = runFn10 texSubImage2DImpl

foreign import uniform1fImpl """
  function uniform1fImpl(webgl, location, x) {
    return function () {
      return webgl.uniform1f(location, x);
    };
  }
""" :: Fn3 WebGLContext WebGLUniformLocation GLfloat (Eff (canvas :: Canvas) Unit)

uniform1f :: WebGLContext -> WebGLUniformLocation -> GLfloat -> Eff (canvas :: Canvas) Unit
uniform1f = runFn3 uniform1fImpl

foreign import uniform1fvImpl """
  function uniform1fvImpl(webgl, location, v) {
    return function () {
      return webgl.uniform1fv(location, v);
    };
  }
""" :: Fn3 WebGLContext WebGLUniformLocation FloatArray (Eff (canvas :: Canvas) Unit)

uniform1fv :: WebGLContext -> WebGLUniformLocation -> FloatArray -> Eff (canvas :: Canvas) Unit
uniform1fv = runFn3 uniform1fvImpl

foreign import uniform1iImpl """
  function uniform1iImpl(webgl, location, x) {
    return function () {
      return webgl.uniform1i(location, x);
    };
  }
""" :: Fn3 WebGLContext WebGLUniformLocation GLint (Eff (canvas :: Canvas) Unit)

uniform1i :: WebGLContext -> WebGLUniformLocation -> GLint -> Eff (canvas :: Canvas) Unit
uniform1i = runFn3 uniform1iImpl

foreign import uniform1ivImpl """
  function uniform1ivImpl(webgl, location, v) {
    return function () {
      return webgl.uniform1iv(location, v);
    };
  }
""" :: Fn3 WebGLContext WebGLUniformLocation Int32Array (Eff (canvas :: Canvas) Unit)

uniform1iv :: WebGLContext -> WebGLUniformLocation -> Int32Array -> Eff (canvas :: Canvas) Unit
uniform1iv = runFn3 uniform1ivImpl

foreign import uniform2fImpl """
  function uniform2fImpl(webgl, location, x, y) {
    return function () {
      return webgl.uniform2f(location, x, y);
    };
  }
""" :: Fn4 WebGLContext WebGLUniformLocation GLfloat GLfloat (Eff (canvas :: Canvas) Unit)

uniform2f :: WebGLContext -> WebGLUniformLocation -> GLfloat -> GLfloat -> Eff (canvas :: Canvas) Unit
uniform2f = runFn4 uniform2fImpl

foreign import uniform2fvImpl """
  function uniform2fvImpl(webgl, location, v) {
    return function () {
      return webgl.uniform2fv(location, v);
    };
  }
""" :: Fn3 WebGLContext WebGLUniformLocation FloatArray (Eff (canvas :: Canvas) Unit)

uniform2fv :: WebGLContext -> WebGLUniformLocation -> FloatArray -> Eff (canvas :: Canvas) Unit
uniform2fv = runFn3 uniform2fvImpl

foreign import uniform2iImpl """
  function uniform2iImpl(webgl, location, x, y) {
    return function () {
      return webgl.uniform2i(location, x, y);
    };
  }
""" :: Fn4 WebGLContext WebGLUniformLocation GLint GLint (Eff (canvas :: Canvas) Unit)

uniform2i :: WebGLContext -> WebGLUniformLocation -> GLint -> GLint -> Eff (canvas :: Canvas) Unit
uniform2i = runFn4 uniform2iImpl

foreign import uniform2ivImpl """
  function uniform2ivImpl(webgl, location, v) {
    return function () {
      return webgl.uniform2iv(location, v);
    };
  }
""" :: Fn3 WebGLContext WebGLUniformLocation Int32Array (Eff (canvas :: Canvas) Unit)

uniform2iv :: WebGLContext -> WebGLUniformLocation -> Int32Array -> Eff (canvas :: Canvas) Unit
uniform2iv = runFn3 uniform2ivImpl

foreign import uniform3fImpl """
  function uniform3fImpl(webgl, location, x, y, z) {
    return function () {
      return webgl.uniform3f(location, x, y, z);
    };
  }
""" :: Fn5 WebGLContext WebGLUniformLocation GLfloat GLfloat GLfloat (Eff (canvas :: Canvas) Unit)

uniform3f :: WebGLContext -> WebGLUniformLocation -> GLfloat -> GLfloat -> GLfloat -> Eff (canvas :: Canvas) Unit
uniform3f = runFn5 uniform3fImpl

foreign import uniform3fvImpl """
  function uniform3fvImpl(webgl, location, v) {
    return function () {
      return webgl.uniform3fv(location, v);
    };
  }
""" :: Fn3 WebGLContext WebGLUniformLocation FloatArray (Eff (canvas :: Canvas) Unit)

uniform3fv :: WebGLContext -> WebGLUniformLocation -> FloatArray -> Eff (canvas :: Canvas) Unit
uniform3fv = runFn3 uniform3fvImpl

foreign import uniform3iImpl """
  function uniform3iImpl(webgl, location, x, y, z) {
    return function () {
      return webgl.uniform3i(location, x, y, z);
    };
  }
""" :: Fn5 WebGLContext WebGLUniformLocation GLint GLint GLint (Eff (canvas :: Canvas) Unit)

uniform3i :: WebGLContext -> WebGLUniformLocation -> GLint -> GLint -> GLint -> Eff (canvas :: Canvas) Unit
uniform3i = runFn5 uniform3iImpl

foreign import uniform3ivImpl """
  function uniform3ivImpl(webgl, location, v) {
    return function () {
      return webgl.uniform3iv(location, v);
    };
  }
""" :: Fn3 WebGLContext WebGLUniformLocation Int32Array (Eff (canvas :: Canvas) Unit)

uniform3iv :: WebGLContext -> WebGLUniformLocation -> Int32Array -> Eff (canvas :: Canvas) Unit
uniform3iv = runFn3 uniform3ivImpl

foreign import uniform4fImpl """
  function uniform4fImpl(webgl, location, x, y, z, w) {
    return function () {
      return webgl.uniform4f(location, x, y, z, w);
    };
  }
""" :: Fn6 WebGLContext WebGLUniformLocation GLfloat GLfloat GLfloat GLfloat (Eff (canvas :: Canvas) Unit)

uniform4f :: WebGLContext -> WebGLUniformLocation -> GLfloat -> GLfloat -> GLfloat -> GLfloat -> Eff (canvas :: Canvas) Unit
uniform4f = runFn6 uniform4fImpl

foreign import uniform4fvImpl """
  function uniform4fvImpl(webgl, location, v) {
    return function () {
      return webgl.uniform4fv(location, v);
    };
  }
""" :: Fn3 WebGLContext WebGLUniformLocation FloatArray (Eff (canvas :: Canvas) Unit)

uniform4fv :: WebGLContext -> WebGLUniformLocation -> FloatArray -> Eff (canvas :: Canvas) Unit
uniform4fv = runFn3 uniform4fvImpl

foreign import uniform4iImpl """
  function uniform4iImpl(webgl, location, x, y, z, w) {
    return function () {
      return webgl.uniform4i(location, x, y, z, w);
    };
  }
""" :: Fn6 WebGLContext WebGLUniformLocation GLint GLint GLint GLint (Eff (canvas :: Canvas) Unit)

uniform4i :: WebGLContext -> WebGLUniformLocation -> GLint -> GLint -> GLint -> GLint -> Eff (canvas :: Canvas) Unit
uniform4i = runFn6 uniform4iImpl

foreign import uniform4ivImpl """
  function uniform4ivImpl(webgl, location, v) {
    return function () {
      return webgl.uniform4iv(location, v);
    };
  }
""" :: Fn3 WebGLContext WebGLUniformLocation Int32Array (Eff (canvas :: Canvas) Unit)

uniform4iv :: WebGLContext -> WebGLUniformLocation -> Int32Array -> Eff (canvas :: Canvas) Unit
uniform4iv = runFn3 uniform4ivImpl

foreign import uniformMatrix2fvImpl """
  function uniformMatrix2fvImpl(webgl, location, transpose, value) {
    return function () {
      return webgl.uniformMatrix2fv(location, transpose, value);
    };
  }
""" :: Fn4 WebGLContext WebGLUniformLocation GLboolean FloatArray (Eff (canvas :: Canvas) Unit)

uniformMatrix2fv :: WebGLContext -> WebGLUniformLocation -> GLboolean -> FloatArray -> Eff (canvas :: Canvas) Unit
uniformMatrix2fv = runFn4 uniformMatrix2fvImpl

foreign import uniformMatrix3fvImpl """
  function uniformMatrix3fvImpl(webgl, location, transpose, value) {
    return function () {
      return webgl.uniformMatrix3fv(location, transpose, value);
    };
  }
""" :: Fn4 WebGLContext WebGLUniformLocation GLboolean FloatArray (Eff (canvas :: Canvas) Unit)

uniformMatrix3fv :: WebGLContext -> WebGLUniformLocation -> GLboolean -> FloatArray -> Eff (canvas :: Canvas) Unit
uniformMatrix3fv = runFn4 uniformMatrix3fvImpl

foreign import uniformMatrix4fvImpl """
  function uniformMatrix4fvImpl(webgl, location, transpose, value) {
    return function () {
      return webgl.uniformMatrix4fv(location, transpose, value);
    };
  }
""" :: Fn4 WebGLContext WebGLUniformLocation GLboolean FloatArray (Eff (canvas :: Canvas) Unit)

uniformMatrix4fv :: WebGLContext -> WebGLUniformLocation -> GLboolean -> FloatArray -> Eff (canvas :: Canvas) Unit
uniformMatrix4fv = runFn4 uniformMatrix4fvImpl

foreign import useProgramImpl """
  function useProgramImpl(webgl, program) {
    return function () {
      return webgl.useProgram(program);
    };
  }
""" :: Fn2 WebGLContext WebGLProgram (Eff (canvas :: Canvas) Unit)

useProgram :: WebGLContext -> WebGLProgram -> Eff (canvas :: Canvas) Unit
useProgram = runFn2 useProgramImpl

foreign import validateProgramImpl """
  function validateProgramImpl(webgl, program) {
    return function () {
      return webgl.validateProgram(program);
    };
  }
""" :: Fn2 WebGLContext WebGLProgram (Eff (canvas :: Canvas) Unit)

validateProgram :: WebGLContext -> WebGLProgram -> Eff (canvas :: Canvas) Unit
validateProgram = runFn2 validateProgramImpl

foreign import vertexAttrib1fImpl """
  function vertexAttrib1fImpl(webgl, indx, x) {
    return function () {
      return webgl.vertexAttrib1f(indx, x);
    };
  }
""" :: Fn3 WebGLContext GLuint GLfloat (Eff (canvas :: Canvas) Unit)

vertexAttrib1f :: WebGLContext -> GLuint -> GLfloat -> Eff (canvas :: Canvas) Unit
vertexAttrib1f = runFn3 vertexAttrib1fImpl

foreign import vertexAttrib1fvImpl """
  function vertexAttrib1fvImpl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib1fv(indx, values);
    };
  }
""" :: Fn3 WebGLContext GLuint FloatArray (Eff (canvas :: Canvas) Unit)

vertexAttrib1fv :: WebGLContext -> GLuint -> FloatArray -> Eff (canvas :: Canvas) Unit
vertexAttrib1fv = runFn3 vertexAttrib1fvImpl

foreign import vertexAttrib2fImpl """
  function vertexAttrib2fImpl(webgl, indx, x, y) {
    return function () {
      return webgl.vertexAttrib2f(indx, x, y);
    };
  }
""" :: Fn4 WebGLContext GLuint GLfloat GLfloat (Eff (canvas :: Canvas) Unit)

vertexAttrib2f :: WebGLContext -> GLuint -> GLfloat -> GLfloat -> Eff (canvas :: Canvas) Unit
vertexAttrib2f = runFn4 vertexAttrib2fImpl

foreign import vertexAttrib2fvImpl """
  function vertexAttrib2fvImpl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib2fv(indx, values);
    };
  }
""" :: Fn3 WebGLContext GLuint FloatArray (Eff (canvas :: Canvas) Unit)

vertexAttrib2fv :: WebGLContext -> GLuint -> FloatArray -> Eff (canvas :: Canvas) Unit
vertexAttrib2fv = runFn3 vertexAttrib2fvImpl

foreign import vertexAttrib3fImpl """
  function vertexAttrib3fImpl(webgl, indx, x, y, z) {
    return function () {
      return webgl.vertexAttrib3f(indx, x, y, z);
    };
  }
""" :: Fn5 WebGLContext GLuint GLfloat GLfloat GLfloat (Eff (canvas :: Canvas) Unit)

vertexAttrib3f :: WebGLContext -> GLuint -> GLfloat -> GLfloat -> GLfloat -> Eff (canvas :: Canvas) Unit
vertexAttrib3f = runFn5 vertexAttrib3fImpl

foreign import vertexAttrib3fvImpl """
  function vertexAttrib3fvImpl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib3fv(indx, values);
    };
  }
""" :: Fn3 WebGLContext GLuint FloatArray (Eff (canvas :: Canvas) Unit)

vertexAttrib3fv :: WebGLContext -> GLuint -> FloatArray -> Eff (canvas :: Canvas) Unit
vertexAttrib3fv = runFn3 vertexAttrib3fvImpl

foreign import vertexAttrib4fImpl """
  function vertexAttrib4fImpl(webgl, indx, x, y, z, w) {
    return function () {
      return webgl.vertexAttrib4f(indx, x, y, z, w);
    };
  }
""" :: Fn6 WebGLContext GLuint GLfloat GLfloat GLfloat GLfloat (Eff (canvas :: Canvas) Unit)

vertexAttrib4f :: WebGLContext -> GLuint -> GLfloat -> GLfloat -> GLfloat -> GLfloat -> Eff (canvas :: Canvas) Unit
vertexAttrib4f = runFn6 vertexAttrib4fImpl

foreign import vertexAttrib4fvImpl """
  function vertexAttrib4fvImpl(webgl, indx, values) {
    return function () {
      return webgl.vertexAttrib4fv(indx, values);
    };
  }
""" :: Fn3 WebGLContext GLuint FloatArray (Eff (canvas :: Canvas) Unit)

vertexAttrib4fv :: WebGLContext -> GLuint -> FloatArray -> Eff (canvas :: Canvas) Unit
vertexAttrib4fv = runFn3 vertexAttrib4fvImpl

foreign import vertexAttribPointerImpl """
  function vertexAttribPointerImpl(webgl, indx, size, type, normalized, stride, offset) {
    return function () {
      return webgl.vertexAttribPointer(indx, size, type, normalized, stride, offset);
    };
  }
""" :: Fn7 WebGLContext GLuint GLint GLenum GLboolean GLsizei GLintptr (Eff (canvas :: Canvas) Unit)

vertexAttribPointer :: WebGLContext -> GLuint -> GLint -> GLenum -> GLboolean -> GLsizei -> GLintptr -> Eff (canvas :: Canvas) Unit
vertexAttribPointer = runFn7 vertexAttribPointerImpl

foreign import viewportImpl """
  function viewportImpl(webgl, x, y, width, height) {
    return function () {
      return webgl.viewport(x, y, width, height);
    };
  }
""" :: Fn5 WebGLContext GLint GLint GLsizei GLsizei (Eff (canvas :: Canvas) Unit)

viewport :: WebGLContext -> GLint -> GLint -> GLsizei -> GLsizei -> Eff (canvas :: Canvas) Unit
viewport = runFn5 viewportImpl

